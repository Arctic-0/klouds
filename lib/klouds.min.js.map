{"version":3,"sources":["webpack://klouds/webpack/universalModuleDefinition","webpack://klouds/webpack/bootstrap","webpack://klouds/./src/index.ts","webpack://klouds/./node_modules/twgl.js/dist/4.x/twgl-full.js","webpack://klouds/./src/shader.vert","webpack://klouds/./src/shader.frag"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","twgl","shader_vert_1","shader_frag_1","parseColor","color","result","div","document","createElement","style","display","body","appendChild","numColors","getComputedStyle","match","intColors","map","a","parseInt","parentElement","removeChild","length","normalizeColor","forEach","idx","Array","isArray","slice","Klouds","options","_this","this","arrays","position","isRunning","accumTime","lastTime","performance","now","render","time","gl","programInfo","bufferInfo","dt","speed","resizeCanvasToDisplaySize","canvas","viewport","width","height","uniforms","resolution","bgColor","cloudColor1","cloudColor2","layerCount","useProgram","program","setBuffersAndAttributes","setUniforms","drawBufferInfo","requestAnimationFrame","element","queryRootElement","selector","Error","getWebGLContext","createProgramInfo","createBufferInfoFromArrays","start","querySelector","HTMLCanvasElement","console","error","HTMLElement","stop","setCloudColor1","setCloudColor2","setBgColor","setLayerCount","count","Math","max","min","jQuery","fn","elements","skies","push","self","./src/attributes.js","createAttribsFromArrays","createBuffersFromArrays","buffers","keys","createBufferFromArray","indices","numElements","elementType","typedArrays","getGLTypeForTypedArray","makeTypedArray","ii","positionKeys","array","getArray","numComponents","getNumComponents","concat","getNumElementsFromNonIndexedArrays","createBufferFromTypedArray","srcBufferInfo","newAttribs","assign","attribs","newIndices","ELEMENT_ARRAY_BUFFER","defaults","attribPrefix","attrib","bindBuffer","ARRAY_BUFFER","buffer","numBytes","getBufferParameter","BUFFER_SIZE","bytesPerValue","type","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","getBytesPerValueForGLType","totalElements","size","getNumElementsFromAttributes","setAttribInfoBufferFromArray","attribInfo","offset","undefined","bufferSubData","setBufferFromTypedArray","drawType","setAttributePrefix","prefix","setAttributeDefaults_","newDefaults","helper","copyExistingProperties","getNumComponents_","getArray_","_interopRequireWildcard","obj","newObj","desc","getOwnPropertyDescriptor","set","default","bufferData","STATIC_DRAW","typedArray","isBuffer","createBuffer","isIndices","data","texcoordRE","colorRE","guessNumComponentsFromName","test","arrayName","isArrayBuffer","Type","Uint16Array","Float32Array","attribName","normalization","WebGLBuffer","normalize","numValues","arrayType","BYTES_PER_ELEMENT","getGLTypeForTypedArrayType","typedArrayType","Int8Array","Uint8Array","getNormalizationForTypedArray","stride","divisor","./src/draw.js","drawObjectList","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","active","vertexArrayInfo","bindBuffers","TRIANGLES","vertexArrayObject","bindVertexArray","programs","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","./src/framebuffers.js","bindFramebufferInfo","framebufferInfo","target","FRAMEBUFFER","bindFramebuffer","framebuffer","drawingBufferWidth","drawingBufferHeight","createFramebufferInfo","attachments","fb","createFramebuffer","colorAttachmentCount","defaultAttachments","attachmentOptions","attachment","format","attachmentPoint","attachmentsByFormat","getAttachmentPointForFormat","COLOR_ATTACHMENT0","renderbufferFormats","isRenderbufferFormat","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","textureOptions","auto","minMag","LINEAR","mag","wrapS","wrap","CLAMP_TO_EDGE","wrapT","textures","createTexture","isRenderbuffer","framebufferRenderbuffer","isTexture","layer","framebufferTextureLayer","level","framebufferTexture2D","texTarget","TEXTURE_2D","resizeFramebufferInfo","ndx","resizeTexture","./src/helper.js","src","dst","copyNamedProperties","names","WebGLRenderbuffer","isShader","WebGLShader","WebGLTexture","isSampler","WebGLSampler","warn","./src/m4.js","axisRotate","axis","angleInRadians","MatType","x","y","z","sqrt","xx","yy","zz","cos","sin","oneMinusCosine","r00","r01","r02","r10","r11","r12","r20","r21","r22","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","axisRotation","copy","frustum","left","right","bottom","top","near","far","dx","dy","dz","getAxis","v3","off","getTranslation","identity","inverse","lookAt","eye","up","xAxis","tempV3a","yAxis","tempV3b","zAxis","tempV3c","subtract","cross","multiply","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","negate","ortho","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","PI","rangeInv","rotateX","rotateY","rotateZ","rotationX","rotationY","rotationZ","scale","v","v0","v1","v2","scaling","setAxis","setDefaultType","ctor","oldType","setTranslation","transformDirection","transformNormal","mi","transformPoint","translate","m30","m31","m32","m33","translation","transpose","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","./src/primitives.js","create3DFVertices","createAugmentedTypedArray","createCubeVertices","createPlaneVertices","createSphereVertices","createTruncatedConeVertices","createXYQuadVertices","createCresentVertices","createCylinderVertices","createTorusVertices","createDiscVertices","deindexVertices","vertices","newVertices","filter","allButIndices","channel","srcBuffer","dstBuffer","constructor","jj","flattenNormals","normals","normal","numNormals","nax","nay","naz","nbx","nby","nbz","ncx","ncy","ncz","nx","ny","nz","makeRandomVertexColors","vcolors","rand","range","random","numVertsPerColor","vertsPerColor","numSets","_ii2","reorientDirections","reorientNormals","reorientPositions","reorientVertices","concatVertices","arrayOfArrays","baseName","_loop","arrayInfo","base","newArrays","info","arraySpec","spec","getLengthOfCombinedArrays","newArraySpec","createArrayOfSameType","newArray","baseIndex","copyElements","copyArraysToNewArray","duplicateVertices","srcArray","createDiscBuffers","createDiscBufferInfo","createTorusBuffers","createTorusBufferInfo","createCylinderBuffers","createCylinderBufferInfo","createCresentBuffers","createCresentBufferInfo","createXYQuadBuffers","createXYQuadBufferInfo","createTruncatedConeBuffers","createTruncatedConeBufferInfo","createSphereBuffers","createSphereBufferInfo","createPlaneBuffers","createPlaneBufferInfo","createCubeBuffers","createCubeBufferInfo","create3DFBuffers","create3DFBufferInfo","attributes","m4","augmentTypedArray","cursor","arguments","reset","opt_index","opt_type","applyFuncToV3Array","matrix","len","tmp","indexOf","xOffset","yOffset","texcoord","depth","subdivisionsWidth","subdivisionsDepth","numVertices","positions","texcoords","u","numVertsAcross","_z","_x","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","latRange","longRange","theta","phi","sinTheta","cosTheta","sinPhi","ux","uy","uz","numVertsAround","_x2","_y","CUBE_FACE_INDICES","k","cornerVertices","faceNormals","uvCoords","faceIndices","uv","bottomRadius","topRadius","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","atan2","cosSlant","sinSlant","end","ringRadius","_yy","_ii","expandRLEData","rleData","padding","runLength","apply","colors","numVerts","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","subdivisionsThick","offsetRange","lerp","createArc","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","xBack","angle","px","py","pz","add","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","bodySubdivisions","startAngle","endAngle","radialParts","bodyParts","sliceAngle","sliceSin","ring","ringAngle","xSin","zCos","_slice","_ring","nextRingIndex","nextSliceIndex","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","pow","createBufferFunc","createBufferInfoFunc","arraySpecPropertyNames","dstNdx","arraySrc","./src/programs.js","createAttributeSetters","createProgram","createProgramFromScripts","shaderScriptIds","opt_attribs","opt_locations","opt_errorCallback","progOptions","getProgramOptions","shaders","shader","createShaderFromScript","defaultShaderType","errorCallback","createProgramFromSources","shaderSources","good","source","script","getElementById","text","createProgramInfoFromProgram","createUniformSetters","createUniformBlockSpecFromProgram","createUniformBlockInfoFromProgram","createUniformBlockInfo","blockName","uniformBlockSpec","createTransformFeedback","tf","bindTransformFeedback","TRANSFORM_FEEDBACK","bindTransformFeedbackInfo","createTransformFeedbackInfo","setAttributes","attribSetters","setters","values","actualSetters","uniformSetters","numArgs","andx","vals","setter","setUniformBlock","uniformBlockInfo","bindUniformBlock","UNIFORM_BUFFER","DYNAMIC_DRAW","setBlockUniforms","utils","typeMap","getBindPointForSamplerType","bindPoint","intSetter","location","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","isWebGL2","textureOrPair","texture","sampler","activeTexture","TEXTURE0","bindTexture","bindSampler","samplerArraySetter","units","Int32Array","index","floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","rowOffset","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","attrTypeMap","spaceRE","loadShader","shaderSource","shaderType","errFn","createShader","lineOffset","replace","compileShader","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","split","line","join","addLineNumbers","deleteShader","transformFeedbackVaryings","opt","attribLocations","getShaderTypeFromScriptType","scriptType","FRAGMENT_SHADER","VERTEX_SHADER","deleteShaders","realShaders","newShaders","elem","attachShader","bindAttribLocation","varyings","transformFeedbackMode","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","scriptId","opt_shaderType","shaderScript","isBuiltIn","startsWith","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","substr","toString","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","numVaryings","TRANSFORM_FEEDBACK_VARYINGS","varying","getTransformFeedbackVarying","transformFeedbackInfo","buf","bindBufferRange","TRANSFORM_FEEDBACK_BUFFER","bindBufferBase","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","ACTIVE_UNIFORM_BLOCKS","getActiveUniformBlockName","blockSpec","usedByVertexShader","getActiveUniformBlockParameter","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","usedByFragmentShader","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","used","usedByVertexSahder","arraySuffixRE","ArrayBuffer","uniformBufferIndex","uniformBlockBinding","uniformNdx","asFloat","bufferBindIndex","byteLength","numAttribs","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","./src/textures.js","setTextureDefaults_","textureColor","setDefaultTextureColor","createSampler","createSamplers","samplerOptions","samplers","setSamplerParameters","setEmptyTexture","setTextureFromArray","loadTextureFromUrl","setTextureFromElement","setTextureFilteringForSize","setTextureParameters","createTextures","callback","noop","numDownloading","errors","images","callCallbackIfReady","setTimeout","onLoadFn","err","tex","img","internalFormat","RGBA","formatType","getFormatAndTypeForInternalFormat","getTextureTypeForArrayType","TEXTURE_CUBE_MAP","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","canGenerateMipmap","canFilter","getNumComponentsForFormat","formatInfo","numColorComponents","getBytesPerElementForInternalFormat","crossOrigin","ctx","getContext","RGB","RG","textureInternalFormatInfo","bytesPerElement","bytesPerElementMap","textureFormat","isPowerOf2","colorRenderable","textureFilterable","defaultType","guessDimensions","lastPackState","savePackState","colorspaceConversion","getParameter","UNPACK_COLORSPACE_CONVERSION_WEBGL","pixelStorei","premultiplyAlpha","UNPACK_PREMULTIPLY_ALPHA_WEBGL","flipY","UNPACK_FLIP_Y_WEBGL","restorePackState","saveSkipState","unpackAlignment","UNPACK_ALIGNMENT","unpackRowLength","UNPACK_ROW_LENGTH","unpackImageHeight","UNPACK_IMAGE_HEIGHT","unpackSkipPixels","UNPACK_SKIP_PIXELS","unpackSkipRows","UNPACK_SKIP_ROWS","unpackSkipImages","UNPACK_SKIP_IMAGES","restoreSkipState","setTextureSamplerParameters","parameteriFn","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_3D","TEXTURE_WRAP_R","wrapR","minLod","TEXTURE_MIN_LOD","maxLod","TEXTURE_MAX_LOD","baseLevel","TEXTURE_BASE_LEVEL","maxLevel","TEXTURE_MAX_LEVEL","texParameteri","samplerParameteri","generateMipmap","filtering","NEAREST","shouldAutomaticallySetTextureFilteringForSize","getCubeFaceOrder","cubeFaceOrder","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","getCubeFacesWithNdx","facesWithNdx","face","sort","slices","imgWidth","imgHeight","nodeName","drawImage","createImageBitmap","colorSpaceConversion","then","imageBitmap","TEXTURE_2D_ARRAY","smallest","largest","xMult","yMult","texImage3D","srcX","srcY","texSubImage3D","setToAnonymousIfUndefinedAndURLIsNotSameOrigin","url","href","hostname","port","protocol","localOrigin","URL","origin","urlIsSameOrigin","isTexImageSource","ImageBitmap","ImageData","loadAndUseImage","Image","clearEventHandlers","removeEventListener","onError","onLoad","msg","addEventListener","bm","cb","fetch","response","ok","blob","bitmap","catch","e","loadImage","setTextureTo1PixelColor","make1Pixel","loadCubemapFromUrls","urls","imgs","numToLoad","faces","faceTarget","otherTarget","loadSlicesFromUrls","firstImage","Uint8ClampedArray","getTypedArrayTypeForGLType","dimensions","glEnumToString","cbrt","faceSize","subarray","./src/twgl-full.js","_exportNames","primitives","_twgl","./src/twgl.js","addExtensionsToContext","setDefaults","context","createContext","create3DContext","multiplier","clientWidth","clientHeight","_draw","_framebuffers","_programs","_typedarrays","_vertexArrays","prefixRE","addExtensionToContext","extensionName","ext","getExtension","enums","fnSuffix","exec","enumSuffix","isFunc","suffix","endsWith","substring","origFn","supportedExtensions","./src/typedarrays.js","Int16Array","CTOR","glTypeToTypedArray","tt","SharedArrayBuffer","./src/utils.js","isWebGL1","texStorage2D","haveEnumsForType","existing","addEnums","./src/v3.js","VecType","distance","distanceSq","divide","divScalar","dot","lerpV","lengthSq","mulScalar","lenSq","./src/vertex-arrays.js","createVertexArrayInfo","programInfos","vao","createVertexArray","createVAOAndSetAttributes","createVAOFromBufferInfo","__webpack_exports__"],"mappings":"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","file":"klouds.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"klouds\"] = factory();\n\telse\n\t\troot[\"klouds\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/// <reference path=\"global.d.ts\" />\r\nimport * as twgl from 'twgl.js'\r\nimport vs from './shader.vert'\r\nimport fs from './shader.frag'\r\n\r\ntype Vec3 = [number, number, number]\r\n\r\nfunction normalizeColor(color: string): Vec3 {\r\n  const div = document.createElement('div')\r\n  div.style.display = 'none'\r\n  div.style.color = color\r\n\r\n  document.body.appendChild(div)\r\n\r\n  const strColors = getComputedStyle(div).color || 'rgb(0, 0, 0)'\r\n  const numColors = strColors.match(/[+-]?\\d+(\\.\\d+)?/g)\r\n  const intColors = numColors ? numColors.map(a => parseInt(a, 10)) : [0, 0, 0]\r\n\r\n  if (div.parentElement) {\r\n    div.parentElement.removeChild(div)\r\n  }\r\n\r\n  if (intColors.length > 3) {\r\n    intColors.length = 3\r\n  } else if (intColors.length < 3) {\r\n    return [0, 0, 0]\r\n  }\r\n\r\n  return intColors as Vec3\r\n}\r\n\r\nfunction parseColor(color: string | Vec3): Vec3 {\r\n  let result: Vec3 = [0, 0, 0]\r\n\r\n  if (typeof color === 'string') {\r\n    normalizeColor(color).forEach((color, idx) => {\r\n      result[idx] = color / 255\r\n    })\r\n  } else if (Array.isArray(color) && color.length === 3) {\r\n    color.slice(0, 3).forEach((color, idx) => {\r\n      result[idx] = color / 255\r\n    })\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport interface KloudsOptions {\r\n  selector: string | HTMLCanvasElement\r\n  speed?: number\r\n  layerCount?: number\r\n  bgColor?: Vec3\r\n  cloudColor1?: Vec3\r\n  cloudColor2?: Vec3\r\n}\r\n\r\nexport class Klouds {\r\n  gl: WebGLRenderingContext\r\n  programInfo: twgl.ProgramInfo\r\n  bufferInfo: twgl.BufferInfo\r\n  arrays: { position: number[] } = {\r\n    position: [-1, -1, 0, 1, -1, 0, -1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, 0]\r\n  }\r\n\r\n  isRunning: boolean = false\r\n  accumTime: number = 0\r\n  lastTime: number = performance.now()\r\n\r\n  speed: number\r\n  layerCount: number\r\n  bgColor: Vec3\r\n  cloudColor1: Vec3\r\n  cloudColor2: Vec3\r\n\r\n  constructor(options: KloudsOptions) {\r\n    const element = this.queryRootElement(options.selector)\r\n    if (!element) {\r\n      throw new Error(`Invalid options.selector value passed to Klouds`)\r\n    }\r\n\r\n    const speed = options.speed || 1\r\n    const layerCount = options.layerCount || 5\r\n\r\n    const cloudColor1: Vec3 = options.cloudColor1\r\n      ? parseColor(options.cloudColor1)\r\n      : [0.1, 0.7, 0.8]\r\n    const cloudColor2: Vec3 = options.cloudColor2\r\n      ? parseColor(options.cloudColor2)\r\n      : [1.0, 1.0, 1.0]\r\n    const bgColor: Vec3 = options.bgColor\r\n      ? parseColor(options.bgColor)\r\n      : [0.0, 0.4, 0.5]\r\n\r\n    element.style.width = '100%'\r\n    element.style.height = '100%'\r\n\r\n    const gl = twgl.getWebGLContext(element)\r\n    const programInfo = twgl.createProgramInfo(gl, [vs, fs])\r\n    const bufferInfo = twgl.createBufferInfoFromArrays(gl, this.arrays)\r\n\r\n    this.gl = gl\r\n    this.programInfo = programInfo\r\n    this.bufferInfo = bufferInfo\r\n\r\n    this.speed = speed\r\n    this.bgColor = bgColor\r\n    this.cloudColor1 = cloudColor1\r\n    this.cloudColor2 = cloudColor2\r\n    this.layerCount = layerCount\r\n\r\n    this.start()\r\n  }\r\n\r\n  private queryRootElement(selector: any): HTMLCanvasElement | null {\r\n    if (typeof selector === 'string') {\r\n      const element = document.querySelector(selector)\r\n      if (!element) {\r\n        console.error('options.selector element not found')\r\n        return null\r\n      } else if (!(element instanceof HTMLCanvasElement)) {\r\n        console.error('options.selector element is not a <canvas> element')\r\n        return null\r\n      } else {\r\n        return element\r\n      }\r\n    } else if (selector instanceof HTMLElement) {\r\n      if (selector instanceof HTMLCanvasElement) {\r\n        return selector\r\n      } else {\r\n        console.error('options.selector element is not a <canvas> element')\r\n        return null\r\n      }\r\n    } else {\r\n      console.error('options.selector value is invalid')\r\n      return null\r\n    }\r\n  }\r\n\r\n  render = (time: number) => {\r\n    const gl = this.gl\r\n    const programInfo = this.programInfo\r\n    const bufferInfo = this.bufferInfo\r\n\r\n    const dt = (time - this.lastTime) * this.speed * 0.001\r\n    this.accumTime += dt\r\n    this.lastTime = time\r\n\r\n    twgl.resizeCanvasToDisplaySize(gl.canvas)\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\r\n\r\n    const uniforms = {\r\n      time: this.accumTime,\r\n      resolution: [gl.canvas.width, gl.canvas.height],\r\n      bgColor: this.bgColor,\r\n      cloudColor1: this.cloudColor1,\r\n      cloudColor2: this.cloudColor2,\r\n      layerCount: this.layerCount / 10\r\n    }\r\n\r\n    gl.useProgram(programInfo.program)\r\n    twgl.setBuffersAndAttributes(gl, programInfo, bufferInfo)\r\n    twgl.setUniforms(programInfo, uniforms)\r\n    twgl.drawBufferInfo(gl, bufferInfo)\r\n\r\n    if (this.isRunning) {\r\n      requestAnimationFrame(this.render)\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.isRunning = false\r\n  }\r\n\r\n  start() {\r\n    this.isRunning = true\r\n    requestAnimationFrame(this.render)\r\n  }\r\n\r\n  setCloudColor1(color: string | Vec3) {\r\n    const c = parseColor(color)\r\n\r\n    if (c) {\r\n      this.cloudColor1 = c\r\n    }\r\n  }\r\n\r\n  setCloudColor2(color: string | Vec3) {\r\n    const c = parseColor(color)\r\n\r\n    if (c) {\r\n      this.cloudColor2 = c\r\n    }\r\n  }\r\n\r\n  setBgColor(color: string | Vec3) {\r\n    const c = parseColor(color)\r\n\r\n    if (c) {\r\n      this.bgColor = c\r\n    }\r\n  }\r\n\r\n  setLayerCount(count: number) {\r\n    this.layerCount = Math.max(1, Math.min(8, count))\r\n  }\r\n}\r\n\r\nexport function create(options: KloudsOptions) {\r\n  return new Klouds(options)\r\n}\r\n\r\nif (window && typeof (window as any).jQuery !== 'undefined') {\r\n  ;(window as any).jQuery.fn.Klouds = function(options: KloudsOptions) {\r\n    options = options || {}\r\n    const elements = this.get()\r\n    const skies = []\r\n    for (let i = 0; i < elements.length; ++i) {\r\n      options.selector = elements[i]\r\n      skies.push(new Klouds(options))\r\n    }\r\n\r\n    return skies\r\n  }\r\n}\r\n","/*!\n * @license twgl.js 4.11.0 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\n * Available via the MIT license.\n * see: http://github.com/greggman/twgl.js for details\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twgl\"] = factory();\n\telse\n\t\troot[\"twgl\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/twgl-full.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./src/attributes.js\":\n/*!***************************!*\\\n  !*** ./src/attributes.js ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.createAttribsFromArrays = createAttribsFromArrays;\nexports.createBuffersFromArrays = createBuffersFromArrays;\nexports.createBufferFromArray = createBufferFromArray;\nexports.createBufferFromTypedArray = createBufferFromTypedArray;\nexports.createBufferInfoFromArrays = createBufferInfoFromArrays;\nexports.setAttribInfoBufferFromArray = setAttribInfoBufferFromArray;\nexports.setAttributePrefix = setAttributePrefix;\nexports.setAttributeDefaults_ = setDefaults;\nexports.getNumComponents_ = getNumComponents;\nexports.getArray_ = getArray;\n\nvar typedArrays = _interopRequireWildcard(__webpack_require__(/*! ./typedarrays.js */ \"./src/typedarrays.js\"));\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level attribute and buffer related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibily they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/attributes\n */\n// make sure we don't see a global gl\nvar gl = undefined; // eslint-disable-line\n\nvar defaults = {\n  attribPrefix: \"\"\n};\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.\n *\n * In otherwords I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\n\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || gl.STATIC_DRAW);\n}\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (helper.isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n\n  type = type || gl.ARRAY_BUFFER;\n  var buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n} // This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\n\n\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  return false;\n} // This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\n\n\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nvar texcoordRE = /coord|texture/i;\nvar colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  var numComponents;\n\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3; // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(\"Can not guess numComponents for attribute '\".concat(name, \"'. Tried \").concat(numComponents, \" but \").concat(length, \" values is not evenly divisible by \").concat(numComponents, \". You should specify it.\"));\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (typedArrays.isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (typedArrays.isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array\n    };\n  }\n\n  var Type = array.type;\n\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n\n  return new Type(array.data);\n}\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of compoments of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createAttribsFromArrays(gl, arrays) {\n  var attribs = {};\n  Object.keys(arrays).forEach(function (arrayName) {\n    if (!isIndices(arrayName)) {\n      var array = arrays[arrayName];\n      var attribName = array.attrib || array.name || array.attribName || defaults.attribPrefix + arrayName;\n\n      if (array.value) {\n        if (!Array.isArray(array.value) && !typedArrays.isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n\n        attribs[attribName] = {\n          value: array.value\n        };\n      } else {\n        var buffer;\n        var type;\n        var normalization;\n        var numComponents;\n\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          var numValues = array.data || array;\n          var arrayType = array.type || Float32Array;\n          var numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = typedArrays.getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n          gl.bufferData(gl.ARRAY_BUFFER, numBytes, array.drawType || gl.STATIC_DRAW);\n        } else {\n          var typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = typedArrays.getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n\n        attribs[attribName] = {\n          buffer: buffer,\n          numComponents: numComponents,\n          type: type,\n          normalize: normalization,\n          stride: array.stride || 0,\n          offset: array.offset || 0,\n          divisor: array.divisor === undefined ? undefined : array.divisor,\n          drawType: array.drawType\n        };\n      }\n    }\n  });\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  return attribs;\n}\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically upate the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably ineffient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\n\n\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n\n  if (offset !== undefined) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, gl.ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === gl.BYTE) return 1; // eslint-disable-line\n\n  if (type === gl.UNSIGNED_BYTE) return 1; // eslint-disable-line\n\n  if (type === gl.SHORT) return 2; // eslint-disable-line\n\n  if (type === gl.UNSIGNED_SHORT) return 2; // eslint-disable-line\n\n  if (type === gl.INT) return 4; // eslint-disable-line\n\n  if (type === gl.UNSIGNED_INT) return 4; // eslint-disable-line\n\n  if (type === gl.FLOAT) return 4; // eslint-disable-line\n\n  return 0;\n} // Tries to get the number of elements from a set of arrays.\n\n\nvar positionKeys = ['position', 'positions', 'a_position'];\n\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  var key;\n  var ii;\n\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n\n    if (key in arrays) {\n      break;\n    }\n  }\n\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n\n  var array = arrays[key];\n  var length = getArray(array).length;\n  var numComponents = getNumComponents(array, key);\n  var numElements = length / numComponents;\n\n  if (length % numComponents > 0) {\n    throw new Error(\"numComponents \".concat(numComponents, \" not correct for length \").concat(length));\n  }\n\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  var key;\n  var ii;\n\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n\n    if (key in attribs) {\n      break;\n    }\n\n    key = defaults.attribPrefix + key;\n\n    if (key in attribs) {\n      break;\n    }\n  }\n\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n\n  var attrib = attribs[key];\n  gl.bindBuffer(gl.ARRAY_BUFFER, attrib.buffer);\n  var numBytes = gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  var bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  var totalElements = numBytes / bytesPerValue;\n  var numComponents = attrib.numComponents || attrib.size; // TODO: check stride\n\n  var numElements = totalElements / numComponents;\n\n  if (numElements % 1 !== 0) {\n    throw new Error(\"numComponents \".concat(numComponents, \" not correct for length \").concat(length));\n  }\n\n  return numElements;\n}\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs approriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         a_position: { buffer: WebGLBuffer, numComponents: 3, },\n *         a_normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         a_texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also by TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or augmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         a_position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         a_texcoods: { numComponents: 2, buffer: gl.createBuffer(), },\n *         a_normals: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specfied overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  var newAttribs = createAttribsFromArrays(gl, arrays);\n  var bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  var indices = arrays.indices;\n\n  if (indices) {\n    var newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, gl.ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that constains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be dervied other wise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBufferFromArray(gl, array, arrayName) {\n  var type = arrayName === \"indices\" ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;\n  var typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBuffersFromArrays(gl, arrays) {\n  var buffers = {};\n  Object.keys(arrays).forEach(function (key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  }); // Ugh!\n\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\n/***/ }),\n\n/***/ \"./src/draw.js\":\n/*!*********************!*\\\n  !*** ./src/draw.js ***!\n  \\*********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.drawBufferInfo = drawBufferInfo;\nexports.drawObjectList = drawObjectList;\n\nvar programs = _interopRequireWildcard(__webpack_require__(/*! ./programs.js */ \"./src/programs.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Drawing related functions\n *\n * For backward compatibily they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? gl.TRIANGLES : type;\n  var indices = bufferInfo.indices;\n  var elementType = bufferInfo.elementType;\n  var numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? gl.UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? gl.UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In otherwords `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElemnts`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\n\n\nfunction drawObjectList(gl, objectsToDraw) {\n  var lastUsedProgramInfo = null;\n  var lastUsedBufferInfo = null;\n  objectsToDraw.forEach(function (object) {\n    if (object.active === false) {\n      return;\n    }\n\n    var programInfo = object.programInfo;\n    var bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    var bindBuffers = false;\n    var type = object.type === undefined ? gl.TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program); // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n\n      bindBuffers = true;\n    } // Setup all the needed attributes.\n\n\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n\n      lastUsedBufferInfo = bufferInfo;\n      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    } // Set the uniforms.\n\n\n    programs.setUniforms(programInfo, object.uniforms); // Draw\n\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\n/***/ }),\n\n/***/ \"./src/framebuffers.js\":\n/*!*****************************!*\\\n  !*** ./src/framebuffers.js ***!\n  \\*****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.bindFramebufferInfo = bindFramebufferInfo;\nexports.createFramebufferInfo = createFramebufferInfo;\nexports.resizeFramebufferInfo = resizeFramebufferInfo;\n\nvar textures = _interopRequireWildcard(__webpack_require__(/*! ./textures.js */ \"./src/textures.js\"));\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Framebuffer related functions\n *\n * For backward compatibily they are available at both `twgl.framebuffer` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/framebuffers\n */\n// make sure we don't see a global gl\nvar gl = undefined; // eslint-disable-line\n\nvar UNSIGNED_BYTE = 0x1401;\n/* PixelFormat */\n\nvar DEPTH_COMPONENT = 0x1902;\nvar RGBA = 0x1908;\n/* Framebuffer Object. */\n\nvar RGBA4 = 0x8056;\nvar RGB5_A1 = 0x8057;\nvar RGB565 = 0x8D62;\nvar DEPTH_COMPONENT16 = 0x81A5;\nvar STENCIL_INDEX = 0x1901;\nvar STENCIL_INDEX8 = 0x8D48;\nvar DEPTH_STENCIL = 0x84F9;\nvar COLOR_ATTACHMENT0 = 0x8CE0;\nvar DEPTH_ATTACHMENT = 0x8D00;\nvar STENCIL_ATTACHMENT = 0x8D20;\nvar DEPTH_STENCIL_ATTACHMENT = 0x821A;\n/* TextureWrapMode */\n\nvar REPEAT = 0x2901; // eslint-disable-line\n\nvar CLAMP_TO_EDGE = 0x812F;\nvar MIRRORED_REPEAT = 0x8370; // eslint-disable-line\n\n/* TextureMagFilter */\n\nvar NEAREST = 0x2600; // eslint-disable-line\n\nvar LINEAR = 0x2601;\n/* TextureMinFilter */\n\nvar NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line\n\nvar LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line\n\nvar NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line\n\nvar LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attach] The attachment point. Defaults\n *   to `gl.COLOR_ATTACTMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {WebGLObject} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachemnts across framebuffers.\n * @memberOf module:twgl\n */\n\nvar defaultAttachments = [{\n  format: RGBA,\n  type: UNSIGNED_BYTE,\n  min: LINEAR,\n  wrap: CLAMP_TO_EDGE\n}, {\n  format: DEPTH_STENCIL\n}];\nvar attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format) {\n  return attachmentsByFormat[format];\n}\n\nvar renderbufferFormats = {};\nrenderbufferFormats[RGBA4] = true;\nrenderbufferFormats[RGB5_A1] = true;\nrenderbufferFormats[RGB565] = true;\nrenderbufferFormats[DEPTH_STENCIL] = true;\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\n\n\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  var target = gl.FRAMEBUFFER;\n  var fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width = width || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  var colorAttachmentCount = 0;\n  var framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height\n  };\n  attachments.forEach(function (attachmentOptions) {\n    var attachment = attachmentOptions.attachment;\n    var format = attachmentOptions.format;\n    var attachmentPoint = getAttachmentPointForFormat(format);\n\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n    }\n\n    if (!attachment) {\n      if (isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);\n        gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n      } else {\n        var textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || gl.LINEAR;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || gl.LINEAR;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || gl.CLAMP_TO_EDGE;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || gl.CLAMP_TO_EDGE;\n        }\n\n        attachment = textures.createTexture(gl, textureOptions);\n      }\n    }\n\n    if (helper.isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, gl.RENDERBUFFER, attachment);\n    } else if (helper.isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(target, attachmentPoint, attachment, attachmentOptions.level || 0, attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(target, attachmentPoint, attachmentOptions.texTarget || gl.TEXTURE_2D, attachment, attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n\n    framebufferInfo.attachments.push(attachment);\n  });\n  return framebufferInfo;\n}\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\n\n\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width = width || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function (attachmentOptions, ndx) {\n    var attachment = framebufferInfo.attachments[ndx];\n    var format = attachmentOptions.format;\n\n    if (helper.isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);\n      gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n    } else if (helper.isTexture(gl, attachment)) {\n      textures.resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n/**\n * Binds a framebuffer\n *\n * This function pretty much soley exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If not passed will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || gl.FRAMEBUFFER;\n\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\n/***/ }),\n\n/***/ \"./src/helper.js\":\n/*!***********************!*\\\n  !*** ./src/helper.js ***!\n  \\***********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.copyExistingProperties = copyExistingProperties;\nexports.copyNamedProperties = copyNamedProperties;\nexports.isBuffer = isBuffer;\nexports.isRenderbuffer = isRenderbuffer;\nexports.isShader = isShader;\nexports.isTexture = isTexture;\nexports.isSampler = isSampler;\nexports.warn = exports.error = void 0;\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function (name) {\n    var value = src[name];\n\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\n\n\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function (key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {\n      dst[key] = src[key];\n    }\n  });\n}\n\nvar error = typeof console !== 'undefined' && console.error && typeof console.error === \"function\" ? console.error.bind(console) : function () {};\nexports.error = error;\nvar warn = typeof console !== 'undefined' && console.warn && typeof console.warn === \"function\" ? console.warn.bind(console) : function () {};\nexports.warn = warn;\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;\n}\n\n/***/ }),\n\n/***/ \"./src/m4.js\":\n/*!*******************!*\\\n  !*** ./src/m4.js ***!\n  \\*******************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.axisRotate = axisRotate;\nexports.axisRotation = axisRotation;\nexports.copy = copy;\nexports.frustum = frustum;\nexports.getAxis = getAxis;\nexports.getTranslation = getTranslation;\nexports.identity = identity;\nexports.inverse = inverse;\nexports.lookAt = lookAt;\nexports.multiply = multiply;\nexports.negate = negate;\nexports.ortho = ortho;\nexports.perspective = perspective;\nexports.rotateX = rotateX;\nexports.rotateY = rotateY;\nexports.rotateZ = rotateZ;\nexports.rotationX = rotationX;\nexports.rotationY = rotationY;\nexports.rotationZ = rotationZ;\nexports.scale = scale;\nexports.scaling = scaling;\nexports.setAxis = setAxis;\nexports.setDefaultType = setDefaultType;\nexports.setTranslation = setTranslation;\nexports.transformDirection = transformDirection;\nexports.transformNormal = transformNormal;\nexports.transformPoint = transformPoint;\nexports.translate = translate;\nexports.translation = translation;\nexports.transpose = transpose;\n\nvar v3 = _interopRequireWildcard(__webpack_require__(/*! ./v3.js */ \"./src/v3.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nvar MatType = Float32Array;\nvar tempV3a = v3.create();\nvar tempV3b = v3.create();\nvar tempV3c = v3.create();\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\n\nfunction setDefaultType(ctor) {\n  var oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction negate(m, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = -m[0];\n  dst[1] = -m[1];\n  dst[2] = -m[2];\n  dst[3] = -m[3];\n  dst[4] = -m[4];\n  dst[5] = -m[5];\n  dst[6] = -m[6];\n  dst[7] = -m[7];\n  dst[8] = -m[8];\n  dst[9] = -m[9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n  return dst;\n}\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction copy(m, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = m[0];\n  dst[1] = m[1];\n  dst[2] = m[2];\n  dst[3] = m[3];\n  dst[4] = m[4];\n  dst[5] = m[5];\n  dst[6] = m[6];\n  dst[7] = m[7];\n  dst[8] = m[8];\n  dst[9] = m[9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n  return dst;\n}\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction transpose(m, dst) {\n  dst = dst || new MatType(16);\n\n  if (dst === m) {\n    var t;\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n  dst[0] = m00;\n  dst[1] = m10;\n  dst[2] = m20;\n  dst[3] = m30;\n  dst[4] = m01;\n  dst[5] = m11;\n  dst[6] = m21;\n  dst[7] = m31;\n  dst[8] = m02;\n  dst[9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n  return dst;\n}\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n  var tmp_0 = m22 * m33;\n  var tmp_1 = m32 * m23;\n  var tmp_2 = m12 * m33;\n  var tmp_3 = m32 * m13;\n  var tmp_4 = m12 * m23;\n  var tmp_5 = m22 * m13;\n  var tmp_6 = m02 * m33;\n  var tmp_7 = m32 * m03;\n  var tmp_8 = m02 * m23;\n  var tmp_9 = m22 * m03;\n  var tmp_10 = m02 * m13;\n  var tmp_11 = m12 * m03;\n  var tmp_12 = m20 * m31;\n  var tmp_13 = m30 * m21;\n  var tmp_14 = m10 * m31;\n  var tmp_15 = m30 * m11;\n  var tmp_16 = m10 * m21;\n  var tmp_17 = m20 * m11;\n  var tmp_18 = m00 * m31;\n  var tmp_19 = m30 * m01;\n  var tmp_20 = m00 * m21;\n  var tmp_21 = m20 * m01;\n  var tmp_22 = m00 * m11;\n  var tmp_23 = m10 * m01;\n  var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n  var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n  dst[0] = d * t0;\n  dst[1] = d * t1;\n  dst[2] = d * t2;\n  dst[3] = d * t3;\n  dst[4] = d * (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[5] = d * (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[6] = d * (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[7] = d * (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[8] = d * (tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33 - (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[9] = d * (tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33 - (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * (tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33 - (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * (tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23 - (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * (tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12 - (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * (tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22 - (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * (tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02 - (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * (tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12 - (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n  return dst;\n}\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\n\n\nfunction multiply(a, b, dst) {\n  dst = dst || new MatType(16);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4 + 0];\n  var a11 = a[4 + 1];\n  var a12 = a[4 + 2];\n  var a13 = a[4 + 3];\n  var a20 = a[8 + 0];\n  var a21 = a[8 + 1];\n  var a22 = a[8 + 2];\n  var a23 = a[8 + 3];\n  var a30 = a[12 + 0];\n  var a31 = a[12 + 1];\n  var a32 = a[12 + 2];\n  var a33 = a[12 + 3];\n  var b00 = b[0];\n  var b01 = b[1];\n  var b02 = b[2];\n  var b03 = b[3];\n  var b10 = b[4 + 0];\n  var b11 = b[4 + 1];\n  var b12 = b[4 + 2];\n  var b13 = b[4 + 3];\n  var b20 = b[8 + 0];\n  var b21 = b[8 + 1];\n  var b22 = b[8 + 2];\n  var b23 = b[8 + 3];\n  var b30 = b[12 + 0];\n  var b31 = b[12 + 1];\n  var b32 = b[12 + 2];\n  var b33 = b[12 + 3];\n  dst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n  return dst;\n}\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none, a new one is created.\n * @return {module:twgl/m4.Mat4} a once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n\n  if (a !== dst) {\n    dst[0] = a[0];\n    dst[1] = a[1];\n    dst[2] = a[2];\n    dst[3] = a[3];\n    dst[4] = a[4];\n    dst[5] = a[5];\n    dst[6] = a[6];\n    dst[7] = a[7];\n    dst[8] = a[8];\n    dst[9] = a[9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction getTranslation(m, dst) {\n  dst = dst || v3.create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction getAxis(m, axis, dst) {\n  dst = dst || v3.create();\n  var off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If none, a new one is created.\n * @return {module:twgl/m4.Mat4} dst\n * @memberOf module:twgl/m4\n */\n\n\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy(a, dst);\n  }\n\n  var off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n  var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  var rangeInv = 1.0 / (zNear - zFar);\n  dst[0] = f / aspect;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = f;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n  return dst;\n}\n/**\n * Computes a 4-by-4 othogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = 2 / (right - left);\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 2 / (top - bottom);\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n  var dx = right - left;\n  var dy = top - bottom;\n  var dz = near - far;\n  dst[0] = 2 * near / dx;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 2 * near / dy;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = (left + right) / dx;\n  dst[9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n  return dst;\n}\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n  var xAxis = tempV3a;\n  var yAxis = tempV3b;\n  var zAxis = tempV3c;\n  v3.normalize(v3.subtract(eye, target, zAxis), zAxis);\n  v3.normalize(v3.cross(up, zAxis, xAxis), xAxis);\n  v3.normalize(v3.cross(zAxis, xAxis, yAxis), yAxis);\n  dst[0] = xAxis[0];\n  dst[1] = xAxis[1];\n  dst[2] = xAxis[2];\n  dst[3] = 0;\n  dst[4] = yAxis[0];\n  dst[5] = yAxis[1];\n  dst[6] = yAxis[2];\n  dst[7] = 0;\n  dst[8] = zAxis[0];\n  dst[9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix by translation by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  var m00 = m[0];\n  var m01 = m[1];\n  var m02 = m[2];\n  var m03 = m[3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[0] = m00;\n    dst[1] = m01;\n    dst[2] = m02;\n    dst[3] = m03;\n    dst[4] = m10;\n    dst[5] = m11;\n    dst[6] = m12;\n    dst[7] = m13;\n    dst[8] = m20;\n    dst[9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = c;\n  dst[6] = s;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix by a rotation around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var m10 = m[4];\n  var m11 = m[5];\n  var m12 = m[6];\n  var m13 = m[7];\n  var m20 = m[8];\n  var m21 = m[9];\n  var m22 = m[10];\n  var m23 = m[11];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[4] = c * m10 + s * m20;\n  dst[5] = c * m11 + s * m21;\n  dst[6] = c * m12 + s * m22;\n  dst[7] = c * m13 + s * m23;\n  dst[8] = c * m20 - s * m10;\n  dst[9] = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[0] = m[0];\n    dst[1] = m[1];\n    dst[2] = m[2];\n    dst[3] = m[3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c;\n  dst[1] = 0;\n  dst[2] = -s;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = s;\n  dst[9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix by a rotation around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c * m00 - s * m20;\n  dst[1] = c * m01 - s * m21;\n  dst[2] = c * m02 - s * m22;\n  dst[3] = c * m03 - s * m23;\n  dst[8] = c * m20 + s * m00;\n  dst[9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[4] = m[4];\n    dst[5] = m[5];\n    dst[6] = m[6];\n    dst[7] = m[7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c;\n  dst[1] = s;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = -s;\n  dst[5] = c;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix by a rotation around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c * m00 + s * m10;\n  dst[1] = c * m01 + s * m11;\n  dst[2] = c * m02 + s * m12;\n  dst[3] = c * m03 + s * m13;\n  dst[4] = c * m10 - s * m00;\n  dst[5] = c * m11 - s * m01;\n  dst[6] = c * m12 - s * m02;\n  dst[7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[8] = m[8];\n    dst[9] = m[9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\n\n\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var x = axis[0];\n  var y = axis[1];\n  var z = axis[2];\n  var n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  var xx = x * x;\n  var yy = y * y;\n  var zz = z * z;\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  var oneMinusCosine = 1 - c;\n  dst[0] = xx + (1 - xx) * c;\n  dst[1] = x * y * oneMinusCosine + z * s;\n  dst[2] = x * z * oneMinusCosine - y * s;\n  dst[3] = 0;\n  dst[4] = x * y * oneMinusCosine - z * s;\n  dst[5] = yy + (1 - yy) * c;\n  dst[6] = y * z * oneMinusCosine + x * s;\n  dst[7] = 0;\n  dst[8] = x * z * oneMinusCosine + y * s;\n  dst[9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix by rotation around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var x = axis[0];\n  var y = axis[1];\n  var z = axis[2];\n  var n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  var xx = x * x;\n  var yy = y * y;\n  var zz = z * z;\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  var oneMinusCosine = 1 - c;\n  var r00 = xx + (1 - xx) * c;\n  var r01 = x * y * oneMinusCosine + z * s;\n  var r02 = x * z * oneMinusCosine - y * s;\n  var r10 = x * y * oneMinusCosine - z * s;\n  var r11 = yy + (1 - yy) * c;\n  var r12 = y * z * oneMinusCosine + x * s;\n  var r20 = x * z * oneMinusCosine + y * s;\n  var r21 = y * z * oneMinusCosine - x * s;\n  var r22 = zz + (1 - zz) * c;\n  var m00 = m[0];\n  var m01 = m[1];\n  var m02 = m[2];\n  var m03 = m[3];\n  var m10 = m[4];\n  var m11 = m[5];\n  var m12 = m[6];\n  var m13 = m[7];\n  var m20 = m[8];\n  var m21 = m[9];\n  var m22 = m[10];\n  var m23 = m[11];\n  dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = v[0];\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = v[1];\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix, scaling in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * m[0 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2];\n  dst[3] = v0 * m[0 * 4 + 3];\n  dst[4] = v1 * m[1 * 4 + 0];\n  dst[5] = v1 * m[1 * 4 + 1];\n  dst[6] = v1 * m[1 * 4 + 2];\n  dst[7] = v1 * m[1 * 4 + 3];\n  dst[8] = v2 * m[2 * 4 + 0];\n  dst[9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result\n * @return {module:twgl/v3.Vec3} dst or new vec3 if not provided\n * @memberOf module:twgl/m4\n */\n\n\nfunction transformPoint(m, v, dst) {\n  dst = dst || v3.create();\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n  return dst;\n}\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result\n * @return {module:twgl/v3.Vec3} dst or new Vec3 if not provided\n * @memberOf module:twgl/m4\n */\n\n\nfunction transformDirection(m, v, dst) {\n  dst = dst || v3.create();\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n  return dst;\n}\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\n\n\nfunction transformNormal(m, v, dst) {\n  dst = dst || v3.create();\n  var mi = inverse(m);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n  return dst;\n}\n\n/***/ }),\n\n/***/ \"./src/primitives.js\":\n/*!***************************!*\\\n  !*** ./src/primitives.js ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.create3DFVertices = create3DFVertices;\nexports.createAugmentedTypedArray = createAugmentedTypedArray;\nexports.createCubeVertices = createCubeVertices;\nexports.createPlaneVertices = createPlaneVertices;\nexports.createSphereVertices = createSphereVertices;\nexports.createTruncatedConeVertices = createTruncatedConeVertices;\nexports.createXYQuadVertices = createXYQuadVertices;\nexports.createCresentVertices = createCresentVertices;\nexports.createCylinderVertices = createCylinderVertices;\nexports.createTorusVertices = createTorusVertices;\nexports.createDiscVertices = createDiscVertices;\nexports.deindexVertices = deindexVertices;\nexports.flattenNormals = flattenNormals;\nexports.makeRandomVertexColors = makeRandomVertexColors;\nexports.reorientDirections = reorientDirections;\nexports.reorientNormals = reorientNormals;\nexports.reorientPositions = reorientPositions;\nexports.reorientVertices = reorientVertices;\nexports.concatVertices = concatVertices;\nexports.duplicateVertices = duplicateVertices;\nexports.createDiscBuffers = exports.createDiscBufferInfo = exports.createTorusBuffers = exports.createTorusBufferInfo = exports.createCylinderBuffers = exports.createCylinderBufferInfo = exports.createCresentBuffers = exports.createCresentBufferInfo = exports.createXYQuadBuffers = exports.createXYQuadBufferInfo = exports.createTruncatedConeBuffers = exports.createTruncatedConeBufferInfo = exports.createSphereBuffers = exports.createSphereBufferInfo = exports.createPlaneBuffers = exports.createPlaneBufferInfo = exports.createCubeBuffers = exports.createCubeBufferInfo = exports.create3DFBuffers = exports.create3DFBufferInfo = void 0;\n\nvar attributes = _interopRequireWildcard(__webpack_require__(/*! ./attributes.js */ \"./src/attributes.js\"));\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nvar typedArrays = _interopRequireWildcard(__webpack_require__(/*! ./typedarrays.js */ \"./src/typedarrays.js\"));\n\nvar m4 = _interopRequireWildcard(__webpack_require__(/*! ./m4.js */ \"./src/m4.js\"));\n\nvar v3 = _interopRequireWildcard(__webpack_require__(/*! ./v3.js */ \"./src/v3.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Various functions to make simple primitives\n *\n * note: Most primitive functions come in 3 styles\n *\n * *  `createSomeShapeBufferInfo`\n *\n *    These functions are almost always the functions you want to call. They\n *    create vertices then make WebGLBuffers and create {@link module:twgl.AttribInfo}s\n *    returing a {@link module:twgl.BufferInfo} you can pass to {@link module:twgl.setBuffersAndAttributes}\n *    and {@link module:twgl.drawBufferInfo} etc...\n *\n * *  `createSomeShapeBuffers`\n *\n *    These create WebGLBuffers and put your data in them but nothing else.\n *    It's a shortcut to doing it yourself if you don't want to use\n *    the higher level functions.\n *\n * *  `createSomeShapeVertices`\n *\n *    These just create vertices, no buffers. This allows you to manipulate the vertices\n *    or add more data before generating a {@link module:twgl.BufferInfo}. Once you're finished\n *    manipulating the vertices call {@link module:twgl.createBufferInfoFromArrays}.\n *\n *    example:\n *\n *        const arrays = twgl.primitives.createPlaneArrays(1);\n *        twgl.primitives.reorientVertices(arrays, m4.rotationX(Math.PI * 0.5));\n *        const bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n * @module twgl/primitives\n */\nvar getArray = attributes.getArray_; // eslint-disable-line\n\nvar getNumComponents = attributes.getNumComponents_; // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\n\nfunction augmentTypedArray(typedArray, numComponents) {\n  var cursor = 0;\n\n  typedArray.push = function () {\n    for (var ii = 0; ii < arguments.length; ++ii) {\n      var value = arguments[ii];\n\n      if (value instanceof Array || typedArrays.isArrayBuffer(value)) {\n        for (var jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n\n  typedArray.reset = function (opt_index) {\n    cursor = opt_index || 0;\n  };\n\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function get() {\n      return this.length / this.numComponents | 0;\n    }\n  });\n  return typedArray;\n}\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  var Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n/**\n * Given indexed vertices creates a new set of vertices unindexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\n\n\nfunction deindexVertices(vertices) {\n  var indices = vertices.indices;\n  var newVertices = {};\n  var numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    var srcBuffer = vertices[channel];\n    var numComponents = srcBuffer.numComponents;\n    var dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n\n    for (var ii = 0; ii < numElements; ++ii) {\n      var ndx = indices[ii];\n      var offset = ndx * numComponents;\n\n      for (var jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n  return newVertices;\n}\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\n\n\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  var normals = vertices.normal;\n  var numNormals = normals.length;\n\n  for (var ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    var nax = normals[ii + 0];\n    var nay = normals[ii + 1];\n    var naz = normals[ii + 2];\n    var nbx = normals[ii + 3];\n    var nby = normals[ii + 4];\n    var nbz = normals[ii + 5];\n    var ncx = normals[ii + 6];\n    var ncy = normals[ii + 7];\n    var ncz = normals[ii + 8]; // add them\n\n    var nx = nax + nbx + ncx;\n    var ny = nay + nby + ncy;\n    var nz = naz + nbz + ncz; // normalize them\n\n    var length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n    nx /= length;\n    ny /= length;\n    nz /= length; // copy them back in\n\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  var len = array.length;\n  var tmp = new Float32Array(3);\n\n  for (var ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal(mi, v, dst) {\n  dst = dst || v3.create();\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n  return dst;\n}\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, m4.transformDirection);\n  return array;\n}\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, m4.inverse(matrix), transformNormal);\n  return array;\n}\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, m4.transformPoint);\n  return array;\n}\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function (name) {\n    var array = arrays[name];\n\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [xOffset + -1 * size, yOffset + -1 * size, xOffset + 1 * size, yOffset + -1 * size, xOffset + -1 * size, yOffset + 1 * size, xOffset + 1 * size, yOffset + 1 * size]\n    },\n    normal: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n    texcoord: [0, 0, 1, 0, 0, 1, 1, 1],\n    indices: [0, 1, 2, 2, 1, 3]\n  };\n}\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createPlaneVertices(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || m4.identity();\n  var numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (var z = 0; z <= subdivisionsDepth; z++) {\n    for (var x = 0; x <= subdivisionsWidth; x++) {\n      var u = x / subdivisionsWidth;\n      var v = z / subdivisionsDepth;\n      positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  var numVertsAcross = subdivisionsWidth + 1;\n  var indices = createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (var _z = 0; _z < subdivisionsDepth; _z++) {\n    // eslint-disable-line\n    for (var _x = 0; _x < subdivisionsWidth; _x++) {\n      // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push((_z + 0) * numVertsAcross + _x, (_z + 1) * numVertsAcross + _x, (_z + 0) * numVertsAcross + _x + 1); // Make triangle 2 of quad.\n\n      indices.push((_z + 1) * numVertsAcross + _x, (_z + 1) * numVertsAcross + _x + 1, (_z + 0) * numVertsAcross + _x + 1);\n    }\n  }\n\n  var arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  }, matrix);\n  return arrays;\n}\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createSphereVertices(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || Math.PI * 2;\n  var latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  var longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians; // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n\n  var numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices); // Generate the individual vertices in our vertex buffer.\n\n  for (var y = 0; y <= subdivisionsHeight; y++) {\n    for (var x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      var u = x / subdivisionsAxis;\n      var v = y / subdivisionsHeight;\n      var theta = longRange * u + opt_startLongitudeInRadians;\n      var phi = latRange * v + opt_startLatitudeInRadians;\n      var sinTheta = Math.sin(theta);\n      var cosTheta = Math.cos(theta);\n      var sinPhi = Math.sin(phi);\n      var cosPhi = Math.cos(phi);\n      var ux = cosTheta * sinPhi;\n      var uy = cosPhi;\n      var uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  var numVertsAround = subdivisionsAxis + 1;\n  var indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n\n  for (var _x2 = 0; _x2 < subdivisionsAxis; _x2++) {\n    // eslint-disable-line\n    for (var _y = 0; _y < subdivisionsHeight; _y++) {\n      // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push((_y + 0) * numVertsAround + _x2, (_y + 0) * numVertsAround + _x2 + 1, (_y + 1) * numVertsAround + _x2); // Make triangle 2 of quad.\n\n      indices.push((_y + 1) * numVertsAround + _x2, (_y + 0) * numVertsAround + _x2 + 1, (_y + 1) * numVertsAround + _x2 + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\n\n\nvar CUBE_FACE_INDICES = [[3, 7, 5, 1], // right\n[6, 2, 0, 4], // left\n[6, 7, 3, 2], // ??\n[0, 1, 5, 4], // ??\n[7, 6, 4, 5], // front\n[2, 3, 1, 0]];\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\nfunction createCubeVertices(size) {\n  size = size || 1;\n  var k = size / 2;\n  var cornerVertices = [[-k, -k, -k], [+k, -k, -k], [-k, +k, -k], [+k, +k, -k], [-k, -k, +k], [+k, -k, +k], [-k, +k, +k], [+k, +k, +k]];\n  var faceNormals = [[+1, +0, +0], [-1, +0, +0], [+0, +1, +0], [+0, -1, +0], [+0, +0, +1], [+0, +0, -1]];\n  var uvCoords = [[1, 0], [0, 0], [0, 1], [1, 1]];\n  var numVertices = 6 * 4;\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (var f = 0; f < 6; ++f) {\n    var faceIndices = CUBE_FACE_INDICES[f];\n\n    for (var v = 0; v < 4; ++v) {\n      var position = cornerVertices[faceIndices[v]];\n      var normal = faceNormals[f];\n      var uv = uvCoords[v]; // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n    } // Two triangles make a square face.\n\n\n    var offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createTruncatedConeVertices(bottomRadius, topRadius, height, radialSubdivisions, verticalSubdivisions, opt_topCap, opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  var topCap = opt_topCap === undefined ? true : opt_topCap;\n  var bottomCap = opt_bottomCap === undefined ? true : opt_bottomCap;\n  var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n  var numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra) * 2, Uint16Array);\n  var vertsAroundEdge = radialSubdivisions + 1; // The slant of the cone is constant across its surface\n\n  var slant = Math.atan2(bottomRadius - topRadius, height);\n  var cosSlant = Math.cos(slant);\n  var sinSlant = Math.sin(slant);\n  var start = topCap ? -2 : 0;\n  var end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (var yy = start; yy <= end; ++yy) {\n    var v = yy / verticalSubdivisions;\n    var y = height * v;\n    var ringRadius = void 0;\n\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius + (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n\n    y -= height / 2;\n\n    for (var ii = 0; ii < vertsAroundEdge; ++ii) {\n      var sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      var cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      normals.push(yy < 0 || yy > verticalSubdivisions ? 0 : sin * cosSlant, yy < 0 ? -1 : yy > verticalSubdivisions ? 1 : sinSlant, yy < 0 || yy > verticalSubdivisions ? 0 : cos * cosSlant);\n      texcoords.push(ii / radialSubdivisions, 1 - v);\n    }\n  }\n\n  for (var _yy = 0; _yy < verticalSubdivisions + extra; ++_yy) {\n    // eslint-disable-line\n    for (var _ii = 0; _ii < radialSubdivisions; ++_ii) {\n      // eslint-disable-line\n      indices.push(vertsAroundEdge * (_yy + 0) + 0 + _ii, vertsAroundEdge * (_yy + 0) + 1 + _ii, vertsAroundEdge * (_yy + 1) + 1 + _ii);\n      indices.push(vertsAroundEdge * (_yy + 0) + 0 + _ii, vertsAroundEdge * (_yy + 1) + 1 + _ii, vertsAroundEdge * (_yy + 1) + 0 + _ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\n\n\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  var data = [];\n\n  for (var ii = 0; ii < rleData.length; ii += 4) {\n    var runLength = rleData[ii];\n    var element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n\n    for (var jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n\n  return data;\n}\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction create3DFVertices() {\n  var positions = [// left column front\n  0, 0, 0, 0, 150, 0, 30, 0, 0, 0, 150, 0, 30, 150, 0, 30, 0, 0, // top rung front\n  30, 0, 0, 30, 30, 0, 100, 0, 0, 30, 30, 0, 100, 30, 0, 100, 0, 0, // middle rung front\n  30, 60, 0, 30, 90, 0, 67, 60, 0, 30, 90, 0, 67, 90, 0, 67, 60, 0, // left column back\n  0, 0, 30, 30, 0, 30, 0, 150, 30, 0, 150, 30, 30, 0, 30, 30, 150, 30, // top rung back\n  30, 0, 30, 100, 0, 30, 30, 30, 30, 30, 30, 30, 100, 0, 30, 100, 30, 30, // middle rung back\n  30, 60, 30, 67, 60, 30, 30, 90, 30, 30, 90, 30, 67, 60, 30, 67, 90, 30, // top\n  0, 0, 0, 100, 0, 0, 100, 0, 30, 0, 0, 0, 100, 0, 30, 0, 0, 30, // top rung front\n  100, 0, 0, 100, 30, 0, 100, 30, 30, 100, 0, 0, 100, 30, 30, 100, 0, 30, // under top rung\n  30, 30, 0, 30, 30, 30, 100, 30, 30, 30, 30, 0, 100, 30, 30, 100, 30, 0, // between top rung and middle\n  30, 30, 0, 30, 60, 30, 30, 30, 30, 30, 30, 0, 30, 60, 0, 30, 60, 30, // top of middle rung\n  30, 60, 0, 67, 60, 30, 30, 60, 30, 30, 60, 0, 67, 60, 0, 67, 60, 30, // front of middle rung\n  67, 60, 0, 67, 90, 30, 67, 60, 30, 67, 60, 0, 67, 90, 0, 67, 90, 30, // bottom of middle rung.\n  30, 90, 0, 30, 90, 30, 67, 90, 30, 30, 90, 0, 67, 90, 30, 67, 90, 0, // front of bottom\n  30, 90, 0, 30, 150, 30, 30, 90, 30, 30, 90, 0, 30, 150, 0, 30, 150, 30, // bottom\n  0, 150, 0, 0, 150, 30, 30, 150, 30, 0, 150, 0, 30, 150, 30, 30, 150, 0, // left side\n  0, 0, 0, 0, 0, 30, 0, 150, 30, 0, 0, 0, 0, 150, 30, 0, 150, 0];\n  var texcoords = [// left column front\n  0.22, 0.19, 0.22, 0.79, 0.34, 0.19, 0.22, 0.79, 0.34, 0.79, 0.34, 0.19, // top rung front\n  0.34, 0.19, 0.34, 0.31, 0.62, 0.19, 0.34, 0.31, 0.62, 0.31, 0.62, 0.19, // middle rung front\n  0.34, 0.43, 0.34, 0.55, 0.49, 0.43, 0.34, 0.55, 0.49, 0.55, 0.49, 0.43, // left column back\n  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // top rung back\n  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // middle rung back\n  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // top\n  0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, // top rung front\n  0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, // under top rung\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // between top rung and middle\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // top of middle rung\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // front of middle rung\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // bottom of middle rung.\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // front of bottom\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // bottom\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // left side\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0];\n  var normals = expandRLEData([// left column front\n  // top rung front\n  // middle rung front\n  18, 0, 0, 1, // left column back\n  // top rung back\n  // middle rung back\n  18, 0, 0, -1, // top\n  6, 0, 1, 0, // top rung front\n  6, 1, 0, 0, // under top rung\n  6, 0, -1, 0, // between top rung and middle\n  6, 1, 0, 0, // top of middle rung\n  6, 0, 1, 0, // front of middle rung\n  6, 1, 0, 0, // bottom of middle rung.\n  6, 0, -1, 0, // front of bottom\n  6, 1, 0, 0, // bottom\n  6, 0, -1, 0, // left side\n  6, -1, 0, 0]);\n  var colors = expandRLEData([// left column front\n  // top rung front\n  // middle rung front\n  18, 200, 70, 120, // left column back\n  // top rung back\n  // middle rung back\n  18, 80, 70, 200, // top\n  6, 70, 200, 210, // top rung front\n  6, 200, 200, 70, // under top rung\n  6, 210, 100, 70, // between top rung and middle\n  6, 210, 160, 70, // top of middle rung\n  6, 70, 180, 210, // front of middle rung\n  6, 100, 70, 210, // bottom of middle rung.\n  6, 76, 210, 100, // front of bottom\n  6, 140, 210, 80, // bottom\n  6, 90, 130, 110, // left side\n  6, 160, 160, 220], [255]);\n  var numVerts = positions.length / 3;\n  var arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2, numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array)\n  };\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (var ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n/**\n * Creates cresent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the cresent.\n * @param {number} outerRadius The outer radius of the cresent.\n * @param {number} innerRadius The inner radius of the cresent.\n * @param {number} thickness The thickness of the cresent.\n * @param {number} subdivisionsDown number of steps around the cresent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates cresent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the cresent.\n * @param {number} outerRadius The outer radius of the cresent.\n * @param {number} innerRadius The inner radius of the cresent.\n * @param {number} thickness The thickness of the cresent.\n * @param {number} subdivisionsDown number of steps around the cresent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates cresent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the cresent.\n * @param {number} outerRadius The outer radius of the cresent.\n * @param {number} innerRadius The inner radius of the cresent.\n * @param {number} thickness The thickness of the cresent.\n * @param {number} subdivisionsDown number of steps around the cresent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createCresentVertices(verticalRadius, outerRadius, innerRadius, thickness, subdivisionsDown, startOffset, endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset = endOffset || 1;\n  var subdivisionsThick = 2;\n  var offsetRange = endOffset - startOffset;\n  var numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (var z = 0; z <= subdivisionsDown; z++) {\n      var uBack = x / (subdivisionsThick - 1);\n      var v = z / subdivisionsDown;\n      var xBack = (uBack - 0.5) * 2;\n      var angle = (startOffset + v * offsetRange) * Math.PI;\n      var s = Math.sin(angle);\n      var c = Math.cos(angle);\n      var radius = lerp(verticalRadius, arcRadius, s);\n      var px = xBack * thickness;\n      var py = c * verticalRadius;\n      var pz = s * radius;\n      positions.push(px, py, pz);\n      var n = v3.add(v3.multiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  } // Generate the individual vertices in our vertex buffer.\n\n\n  for (var x = 0; x < subdivisionsThick; x++) {\n    var uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  } // Do outer surface.\n\n\n  var indices = createAugmentedTypedArray(3, subdivisionsDown * 2 * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (var z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(leftArcOffset + z + 0, leftArcOffset + z + 1, rightArcOffset + z + 0); // Make triangle 2 of quad.\n\n      indices.push(leftArcOffset + z + 1, rightArcOffset + z + 1, rightArcOffset + z + 0);\n    }\n  }\n\n  var numVerticesDown = subdivisionsDown + 1; // front\n\n  createSurface(numVerticesDown * 0, numVerticesDown * 4); // right\n\n  createSurface(numVerticesDown * 5, numVerticesDown * 7); // back\n\n  createSurface(numVerticesDown * 6, numVerticesDown * 2); // left\n\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n/**\n * Creates cylinder buffers. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCylinderBuffers\n */\n\n/**\n * Creates cylinder vertices. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createCylinderVertices(radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap) {\n  return createTruncatedConeVertices(radius, radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap);\n}\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createTorusVertices(radius, thickness, radialSubdivisions, bodySubdivisions, startAngle, endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  var range = endAngle - startAngle;\n  var radialParts = radialSubdivisions + 1;\n  var bodyParts = bodySubdivisions + 1;\n  var numVertices = radialParts * bodyParts;\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, radialSubdivisions * bodySubdivisions * 2, Uint16Array);\n\n  for (var slice = 0; slice < bodyParts; ++slice) {\n    var v = slice / bodySubdivisions;\n    var sliceAngle = v * Math.PI * 2;\n    var sliceSin = Math.sin(sliceAngle);\n    var ringRadius = radius + sliceSin * thickness;\n    var ny = Math.cos(sliceAngle);\n    var y = ny * thickness;\n\n    for (var ring = 0; ring < radialParts; ++ring) {\n      var u = ring / radialSubdivisions;\n      var ringAngle = startAngle + u * range;\n      var xSin = Math.sin(ringAngle);\n      var zCos = Math.cos(ringAngle);\n      var x = xSin * ringRadius;\n      var z = zCos * ringRadius;\n      var nx = xSin * sliceSin;\n      var nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (var _slice = 0; _slice < bodySubdivisions; ++_slice) {\n    // eslint-disable-line\n    for (var _ring = 0; _ring < radialSubdivisions; ++_ring) {\n      // eslint-disable-line\n      var nextRingIndex = 1 + _ring;\n      var nextSliceIndex = 1 + _slice;\n      indices.push(radialParts * _slice + _ring, radialParts * nextSliceIndex + _ring, radialParts * _slice + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + _ring, radialParts * nextSliceIndex + nextRingIndex, radialParts * _slice + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose ouside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose ouside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose ouside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createDiscVertices(radius, divisions, stacks, innerRadius, stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0; // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n\n  var numVertices = (divisions + 1) * (stacks + 1);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n  var firstIndex = 0;\n  var radiusSpan = radius - innerRadius;\n  var pointsPerStack = divisions + 1; // Build the disk one stack at a time.\n\n  for (var stack = 0; stack <= stacks; ++stack) {\n    var stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (var i = 0; i <= divisions; ++i) {\n      var theta = 2.0 * Math.PI * i / divisions;\n      var x = stackRadius * Math.cos(theta);\n      var z = stackRadius * Math.sin(theta);\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - i / divisions, stack / stacks);\n\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        var a = firstIndex + (i + 1);\n        var b = firstIndex + i;\n        var c = firstIndex + i - pointsPerStack;\n        var d = firstIndex + (i + 1) - pointsPerStack; // Make a quad of the vertices a, b, c, d.\n\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\n\n\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  var numElements = vertices.position.numElements;\n  var vcolors = createAugmentedTypedArray(4, numElements, Uint8Array);\n\n  var rand = options.rand || function (ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n\n  vertices.color = vcolors;\n\n  if (vertices.indices) {\n    // just make random colors if index\n    for (var ii = 0; ii < numElements; ++ii) {\n      vcolors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    var numVertsPerColor = options.vertsPerColor || 3;\n    var numSets = numElements / numVertsPerColor;\n\n    for (var _ii2 = 0; _ii2 < numSets; ++_ii2) {\n      // eslint-disable-line\n      var color = [rand(_ii2, 0), rand(_ii2, 1), rand(_ii2, 2), rand(_ii2, 3)];\n\n      for (var jj = 0; jj < numVertsPerColor; ++jj) {\n        vcolors.push(color);\n      }\n    }\n  }\n\n  return vertices;\n}\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\n\n\nfunction createBufferFunc(fn) {\n  return function (gl) {\n    var arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return attributes.createBuffersFromArrays(gl, arrays);\n  };\n}\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\n\n\nfunction createBufferInfoFunc(fn) {\n  return function (gl) {\n    var arrays = fn.apply(null, Array.prototype.slice.call(arguments, 1));\n    return attributes.createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nvar arraySpecPropertyNames = [\"numComponents\", \"size\", \"type\", \"normalize\", \"stride\", \"offset\", \"attrib\", \"name\", \"attribName\"];\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\n\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  var length = src.length;\n\n  for (var ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\n\n\nfunction createArrayOfSameType(srcArray, length) {\n  var arraySrc = getArray(srcArray);\n  var newArray = new arraySrc.constructor(length);\n  var newArraySpec = newArray; // If it appears to have been augmented make new one augemented\n\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  } // If it was a fullspec make new one a fullspec\n\n\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray\n    };\n    helper.copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n\n  return newArraySpec;\n}\n/**\n * Concatinates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primtiives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatinated vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction concatVertices(arrayOfArrays) {\n  var names = {};\n  var baseName; // get names of all arrays.\n  // and numElements for each set of vertices\n\n  var _loop = function _loop(ii) {\n    var arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function (name) {\n      // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n\n      var arrayInfo = arrays[name];\n      var numComponents = getNumComponents(arrayInfo, name);\n      var array = getArray(arrayInfo);\n      var numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  };\n\n  for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n    _loop(ii);\n  } // compute length of combined array\n  // and return one for reference\n\n\n  function getLengthOfCombinedArrays(name) {\n    var length = 0;\n    var arraySpec;\n\n    for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n      var arrays = arrayOfArrays[ii];\n      var arrayInfo = arrays[name];\n      var array = getArray(arrayInfo);\n      length += array.length;\n\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n\n    return {\n      length: length,\n      spec: arraySpec\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    var baseIndex = 0;\n    var offset = 0;\n\n    for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n      var arrays = arrayOfArrays[ii];\n      var arrayInfo = arrays[name];\n      var array = getArray(arrayInfo);\n\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n\n      offset += array.length;\n    }\n  }\n\n  var base = names[baseName];\n  var newArrays = {};\n  Object.keys(names).forEach(function (name) {\n    var info = getLengthOfCombinedArrays(name);\n    var newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The dupilicated vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction duplicateVertices(arrays) {\n  var newArrays = {};\n  Object.keys(arrays).forEach(function (name) {\n    var arraySpec = arrays[name];\n    var srcArray = getArray(arraySpec);\n    var newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nvar create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nexports.create3DFBufferInfo = create3DFBufferInfo;\nvar create3DFBuffers = createBufferFunc(create3DFVertices);\nexports.create3DFBuffers = create3DFBuffers;\nvar createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nexports.createCubeBufferInfo = createCubeBufferInfo;\nvar createCubeBuffers = createBufferFunc(createCubeVertices);\nexports.createCubeBuffers = createCubeBuffers;\nvar createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nexports.createPlaneBufferInfo = createPlaneBufferInfo;\nvar createPlaneBuffers = createBufferFunc(createPlaneVertices);\nexports.createPlaneBuffers = createPlaneBuffers;\nvar createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nexports.createSphereBufferInfo = createSphereBufferInfo;\nvar createSphereBuffers = createBufferFunc(createSphereVertices);\nexports.createSphereBuffers = createSphereBuffers;\nvar createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nexports.createTruncatedConeBufferInfo = createTruncatedConeBufferInfo;\nvar createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nexports.createTruncatedConeBuffers = createTruncatedConeBuffers;\nvar createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nexports.createXYQuadBufferInfo = createXYQuadBufferInfo;\nvar createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nexports.createXYQuadBuffers = createXYQuadBuffers;\nvar createCresentBufferInfo = createBufferInfoFunc(createCresentVertices);\nexports.createCresentBufferInfo = createCresentBufferInfo;\nvar createCresentBuffers = createBufferFunc(createCresentVertices);\nexports.createCresentBuffers = createCresentBuffers;\nvar createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nexports.createCylinderBufferInfo = createCylinderBufferInfo;\nvar createCylinderBuffers = createBufferFunc(createCylinderVertices);\nexports.createCylinderBuffers = createCylinderBuffers;\nvar createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nexports.createTorusBufferInfo = createTorusBufferInfo;\nvar createTorusBuffers = createBufferFunc(createTorusVertices);\nexports.createTorusBuffers = createTorusBuffers;\nvar createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nexports.createDiscBufferInfo = createDiscBufferInfo;\nvar createDiscBuffers = createBufferFunc(createDiscVertices);\nexports.createDiscBuffers = createDiscBuffers;\n\n/***/ }),\n\n/***/ \"./src/programs.js\":\n/*!*************************!*\\\n  !*** ./src/programs.js ***!\n  \\*************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.createAttributeSetters = createAttributeSetters;\nexports.createProgram = createProgram;\nexports.createProgramFromScripts = createProgramFromScripts;\nexports.createProgramFromSources = createProgramFromSources;\nexports.createProgramInfo = createProgramInfo;\nexports.createProgramInfoFromProgram = createProgramInfoFromProgram;\nexports.createUniformSetters = createUniformSetters;\nexports.createUniformBlockSpecFromProgram = createUniformBlockSpecFromProgram;\nexports.createUniformBlockInfoFromProgram = createUniformBlockInfoFromProgram;\nexports.createUniformBlockInfo = createUniformBlockInfo;\nexports.createTransformFeedback = createTransformFeedback;\nexports.createTransformFeedbackInfo = createTransformFeedbackInfo;\nexports.bindTransformFeedbackInfo = bindTransformFeedbackInfo;\nexports.setAttributes = setAttributes;\nexports.setBuffersAndAttributes = setBuffersAndAttributes;\nexports.setUniforms = setUniforms;\nexports.setUniformBlock = setUniformBlock;\nexports.setBlockUniforms = setBlockUniforms;\nexports.bindUniformBlock = bindUniformBlock;\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! ./utils.js */ \"./src/utils.js\"));\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibily they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\nvar error = helper.error;\nvar warn = helper.warn;\nvar getElementById = typeof document !== 'undefined' && document.getElementById ? document.getElementById.bind(document) : function () {\n  return null;\n};\nvar FLOAT = 0x1406;\nvar FLOAT_VEC2 = 0x8B50;\nvar FLOAT_VEC3 = 0x8B51;\nvar FLOAT_VEC4 = 0x8B52;\nvar INT = 0x1404;\nvar INT_VEC2 = 0x8B53;\nvar INT_VEC3 = 0x8B54;\nvar INT_VEC4 = 0x8B55;\nvar BOOL = 0x8B56;\nvar BOOL_VEC2 = 0x8B57;\nvar BOOL_VEC3 = 0x8B58;\nvar BOOL_VEC4 = 0x8B59;\nvar FLOAT_MAT2 = 0x8B5A;\nvar FLOAT_MAT3 = 0x8B5B;\nvar FLOAT_MAT4 = 0x8B5C;\nvar SAMPLER_2D = 0x8B5E;\nvar SAMPLER_CUBE = 0x8B60;\nvar SAMPLER_3D = 0x8B5F;\nvar SAMPLER_2D_SHADOW = 0x8B62;\nvar FLOAT_MAT2x3 = 0x8B65;\nvar FLOAT_MAT2x4 = 0x8B66;\nvar FLOAT_MAT3x2 = 0x8B67;\nvar FLOAT_MAT3x4 = 0x8B68;\nvar FLOAT_MAT4x2 = 0x8B69;\nvar FLOAT_MAT4x3 = 0x8B6A;\nvar SAMPLER_2D_ARRAY = 0x8DC1;\nvar SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;\nvar SAMPLER_CUBE_SHADOW = 0x8DC5;\nvar UNSIGNED_INT = 0x1405;\nvar UNSIGNED_INT_VEC2 = 0x8DC6;\nvar UNSIGNED_INT_VEC3 = 0x8DC7;\nvar UNSIGNED_INT_VEC4 = 0x8DC8;\nvar INT_SAMPLER_2D = 0x8DCA;\nvar INT_SAMPLER_3D = 0x8DCB;\nvar INT_SAMPLER_CUBE = 0x8DCC;\nvar INT_SAMPLER_2D_ARRAY = 0x8DCF;\nvar UNSIGNED_INT_SAMPLER_2D = 0x8DD2;\nvar UNSIGNED_INT_SAMPLER_3D = 0x8DD3;\nvar UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;\nvar UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\nvar TEXTURE_2D = 0x0DE1;\nvar TEXTURE_CUBE_MAP = 0x8513;\nvar TEXTURE_3D = 0x806F;\nvar TEXTURE_2D_ARRAY = 0x8C1A;\nvar typeMap = {};\n/**\n * Returns the corresponding bind point for a given sampler type\n */\n\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n} // This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\n\nfunction floatSetter(gl, location) {\n  return function (v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function (v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function (v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function (v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function (v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function (v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function (v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function (v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function (v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function (v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function (v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function (v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function (v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function (v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function (v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  var bindPoint = getBindPointForSamplerType(gl, type);\n  return utils.isWebGL2(gl) ? function (textureOrPair) {\n    var texture;\n    var sampler;\n\n    if (helper.isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n\n    gl.uniform1i(location, unit);\n    gl.activeTexture(gl.TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function (texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(gl.TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  var bindPoint = getBindPointForSamplerType(gl, type);\n  var units = new Int32Array(size);\n\n  for (var ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return utils.isWebGL2(gl) ? function (textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function (textureOrPair, index) {\n      gl.activeTexture(gl.TEXTURE0 + units[index]);\n      var texture;\n      var sampler;\n\n      if (helper.isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function (textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function (texture, index) {\n      gl.activeTexture(gl.TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT] = {\n  Type: Float32Array,\n  size: 4,\n  setter: floatSetter,\n  arraySetter: floatArraySetter\n};\ntypeMap[FLOAT_VEC2] = {\n  Type: Float32Array,\n  size: 8,\n  setter: floatVec2Setter\n};\ntypeMap[FLOAT_VEC3] = {\n  Type: Float32Array,\n  size: 12,\n  setter: floatVec3Setter\n};\ntypeMap[FLOAT_VEC4] = {\n  Type: Float32Array,\n  size: 16,\n  setter: floatVec4Setter\n};\ntypeMap[INT] = {\n  Type: Int32Array,\n  size: 4,\n  setter: intSetter,\n  arraySetter: intArraySetter\n};\ntypeMap[INT_VEC2] = {\n  Type: Int32Array,\n  size: 8,\n  setter: intVec2Setter\n};\ntypeMap[INT_VEC3] = {\n  Type: Int32Array,\n  size: 12,\n  setter: intVec3Setter\n};\ntypeMap[INT_VEC4] = {\n  Type: Int32Array,\n  size: 16,\n  setter: intVec4Setter\n};\ntypeMap[UNSIGNED_INT] = {\n  Type: Uint32Array,\n  size: 4,\n  setter: uintSetter,\n  arraySetter: uintArraySetter\n};\ntypeMap[UNSIGNED_INT_VEC2] = {\n  Type: Uint32Array,\n  size: 8,\n  setter: uintVec2Setter\n};\ntypeMap[UNSIGNED_INT_VEC3] = {\n  Type: Uint32Array,\n  size: 12,\n  setter: uintVec3Setter\n};\ntypeMap[UNSIGNED_INT_VEC4] = {\n  Type: Uint32Array,\n  size: 16,\n  setter: uintVec4Setter\n};\ntypeMap[BOOL] = {\n  Type: Uint32Array,\n  size: 4,\n  setter: intSetter,\n  arraySetter: intArraySetter\n};\ntypeMap[BOOL_VEC2] = {\n  Type: Uint32Array,\n  size: 8,\n  setter: intVec2Setter\n};\ntypeMap[BOOL_VEC3] = {\n  Type: Uint32Array,\n  size: 12,\n  setter: intVec3Setter\n};\ntypeMap[BOOL_VEC4] = {\n  Type: Uint32Array,\n  size: 16,\n  setter: intVec4Setter\n};\ntypeMap[FLOAT_MAT2] = {\n  Type: Float32Array,\n  size: 16,\n  setter: floatMat2Setter\n};\ntypeMap[FLOAT_MAT3] = {\n  Type: Float32Array,\n  size: 36,\n  setter: floatMat3Setter\n};\ntypeMap[FLOAT_MAT4] = {\n  Type: Float32Array,\n  size: 64,\n  setter: floatMat4Setter\n};\ntypeMap[FLOAT_MAT2x3] = {\n  Type: Float32Array,\n  size: 24,\n  setter: floatMat23Setter\n};\ntypeMap[FLOAT_MAT2x4] = {\n  Type: Float32Array,\n  size: 32,\n  setter: floatMat24Setter\n};\ntypeMap[FLOAT_MAT3x2] = {\n  Type: Float32Array,\n  size: 24,\n  setter: floatMat32Setter\n};\ntypeMap[FLOAT_MAT3x4] = {\n  Type: Float32Array,\n  size: 48,\n  setter: floatMat34Setter\n};\ntypeMap[FLOAT_MAT4x2] = {\n  Type: Float32Array,\n  size: 32,\n  setter: floatMat42Setter\n};\ntypeMap[FLOAT_MAT4x3] = {\n  Type: Float32Array,\n  size: 48,\n  setter: floatMat43Setter\n};\ntypeMap[SAMPLER_2D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D\n};\ntypeMap[SAMPLER_CUBE] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP\n};\ntypeMap[SAMPLER_3D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_3D\n};\ntypeMap[SAMPLER_2D_SHADOW] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D\n};\ntypeMap[SAMPLER_2D_ARRAY] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY\n};\ntypeMap[SAMPLER_2D_ARRAY_SHADOW] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY\n};\ntypeMap[SAMPLER_CUBE_SHADOW] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP\n};\ntypeMap[INT_SAMPLER_2D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D\n};\ntypeMap[INT_SAMPLER_3D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_3D\n};\ntypeMap[INT_SAMPLER_CUBE] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP\n};\ntypeMap[INT_SAMPLER_2D_ARRAY] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY\n};\ntypeMap[UNSIGNED_INT_SAMPLER_2D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D\n};\ntypeMap[UNSIGNED_INT_SAMPLER_3D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_3D\n};\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP\n};\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY\n};\n\nfunction floatAttribSetter(gl, index) {\n  return function (b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function (b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || gl.INT, b.stride || 0, b.offset || 0);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function (b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || gl.UNSIGNED_INT, b.stride || 0, b.offset || 0);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  var defaultSize = typeInfo.size;\n  var count = typeInfo.count;\n  return function (b) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n    var numComponents = b.size || b.numComponents || defaultSize;\n    var size = numComponents / count;\n    var type = b.type || gl.FLOAT;\n    var typeInfo = typeMap[type];\n    var stride = typeInfo.size * numComponents;\n    var normalize = b.normalize || false;\n    var offset = b.offset || 0;\n    var rowOffset = stride / count;\n\n    for (var i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(index + i, size, type, normalize, stride, offset + rowOffset * i);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index + i, b.divisor);\n      }\n    }\n  };\n}\n\nvar attrTypeMap = {};\nattrTypeMap[FLOAT] = {\n  size: 4,\n  setter: floatAttribSetter\n};\nattrTypeMap[FLOAT_VEC2] = {\n  size: 8,\n  setter: floatAttribSetter\n};\nattrTypeMap[FLOAT_VEC3] = {\n  size: 12,\n  setter: floatAttribSetter\n};\nattrTypeMap[FLOAT_VEC4] = {\n  size: 16,\n  setter: floatAttribSetter\n};\nattrTypeMap[INT] = {\n  size: 4,\n  setter: intAttribSetter\n};\nattrTypeMap[INT_VEC2] = {\n  size: 8,\n  setter: intAttribSetter\n};\nattrTypeMap[INT_VEC3] = {\n  size: 12,\n  setter: intAttribSetter\n};\nattrTypeMap[INT_VEC4] = {\n  size: 16,\n  setter: intAttribSetter\n};\nattrTypeMap[UNSIGNED_INT] = {\n  size: 4,\n  setter: uintAttribSetter\n};\nattrTypeMap[UNSIGNED_INT_VEC2] = {\n  size: 8,\n  setter: uintAttribSetter\n};\nattrTypeMap[UNSIGNED_INT_VEC3] = {\n  size: 12,\n  setter: uintAttribSetter\n};\nattrTypeMap[UNSIGNED_INT_VEC4] = {\n  size: 16,\n  setter: uintAttribSetter\n};\nattrTypeMap[BOOL] = {\n  size: 4,\n  setter: intAttribSetter\n};\nattrTypeMap[BOOL_VEC2] = {\n  size: 8,\n  setter: intAttribSetter\n};\nattrTypeMap[BOOL_VEC3] = {\n  size: 12,\n  setter: intAttribSetter\n};\nattrTypeMap[BOOL_VEC4] = {\n  size: 16,\n  setter: intAttribSetter\n};\nattrTypeMap[FLOAT_MAT2] = {\n  size: 4,\n  setter: matAttribSetter,\n  count: 2\n};\nattrTypeMap[FLOAT_MAT3] = {\n  size: 9,\n  setter: matAttribSetter,\n  count: 3\n};\nattrTypeMap[FLOAT_MAT4] = {\n  size: 16,\n  setter: matAttribSetter,\n  count: 4\n}; // make sure we don't see a global gl\n\nvar gl = undefined; // eslint-disable-line\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\nfunction addLineNumbers(src, lineOffset) {\n  lineOffset = lineOffset || 0;\n  ++lineOffset;\n  return src.split(\"\\n\").map(function (line, ndx) {\n    return ndx + lineOffset + \": \" + line;\n  }).join(\"\\n\");\n}\n\nvar spaceRE = /^[ \\t]*\\n/;\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n * @return {WebGLShader} The created shader.\n * @private\n */\n\nfunction loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n  var errFn = opt_errorCallback || error; // Create the shader object\n\n  var shader = gl.createShader(shaderType); // Remove the first end of line because WebGL 2.0 requires\n  // #version 300 es\n  // as the first line. No whitespace allowed before that line\n  // so\n  //\n  // <script>\n  // #version 300 es\n  // </script>\n  //\n  // Has one line before it which is invalid according to GLSL ES 3.00\n  //\n\n  var lineOffset = 0;\n\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  } // Load the shader source\n\n\n  gl.shaderSource(shader, shaderSource); // Compile the shader\n\n  gl.compileShader(shader); // Check the compile status\n\n  var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    var lastError = gl.getShaderInfoLog(shader);\n    errFn(addLineNumbers(shaderSource, lineOffset) + \"\\n*** Error compiling shader: \" + lastError);\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments pased on\n * @private\n */\n\n\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  var transformFeedbackVaryings;\n\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback) {\n      return opt_attribs;\n    }\n\n    var opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n  }\n\n  var options = {\n    errorCallback: opt_errorCallback || error,\n    transformFeedbackVaryings: transformFeedbackVaryings\n  };\n\n  if (opt_attribs) {\n    var attribLocations = {};\n\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function (attrib, ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nvar defaultShaderType = [\"VERTEX_SHADER\", \"FRAGMENT_SHADER\"];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return gl.FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return gl.VERTEX_SHADER;\n  }\n\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function (shader) {\n    gl.deleteShader(shader);\n  });\n}\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program and calls useProgram.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var realShaders = [];\n  var newShaders = [];\n\n  for (var ndx = 0; ndx < shaders.length; ++ndx) {\n    var shader = shaders[ndx];\n\n    if (typeof shader === 'string') {\n      var elem = getElementById(shader);\n      var src = elem ? elem.text : shader;\n      var type = gl[defaultShaderType[ndx]];\n\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n\n      shader = loadShader(gl, src, type, progOptions.errorCallback);\n      newShaders.push(shader);\n    }\n\n    if (helper.isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    progOptions.errorCallback(\"not enough shaders for program\");\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  var program = gl.createProgram();\n  realShaders.forEach(function (shader) {\n    gl.attachShader(program, shader);\n  });\n\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function (attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n\n  var varyings = progOptions.transformFeedbackVaryings;\n\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || gl.SEPARATE_ATTRIBS);\n  }\n\n  gl.linkProgram(program); // Check the link status\n\n  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n  if (!linked) {\n    // something went wrong with the link\n    var lastError = gl.getProgramInfoLog(program);\n    progOptions.errorCallback(\"Error in program linking:\" + lastError);\n    gl.deleteProgram(program);\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  return program;\n}\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\n\n\nfunction createShaderFromScript(gl, scriptId, opt_shaderType, opt_errorCallback) {\n  var shaderSource = \"\";\n  var shaderScript = getElementById(scriptId);\n\n  if (!shaderScript) {\n    throw new Error(\"unknown script element: \".concat(scriptId));\n  }\n\n  shaderSource = shaderScript.text;\n  var shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n\n  if (!shaderType) {\n    throw new Error('unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);\n}\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramFromScripts(gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var shaders = [];\n\n  for (var ii = 0; ii < shaderScriptIds.length; ++ii) {\n    var shader = createShaderFromScript(gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\n    if (!shader) {\n      return null;\n    }\n\n    shaders.push(shader);\n  }\n\n  return createProgram(gl, shaders, progOptions);\n}\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var shaders = [];\n\n  for (var ii = 0; ii < shaderSources.length; ++ii) {\n    var shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\n    if (!shader) {\n      return null;\n    }\n\n    shaders.push(shader);\n  }\n\n  return createProgram(gl, shaders, progOptions);\n}\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\n\n\nfunction isBuiltIn(info) {\n  var name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\n\n\nfunction createUniformSetters(gl, program) {\n  var textureUnit = 0;\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n\n  function createUniformSetter(program, uniformInfo) {\n    var location = gl.getUniformLocation(program, uniformInfo.name);\n    var isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === \"[0]\";\n    var type = uniformInfo.type;\n    var typeInfo = typeMap[type];\n\n    if (!typeInfo) {\n      throw new Error(\"unknown type: 0x\".concat(type.toString(16))); // we should never get here.\n    }\n\n    var setter;\n\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      var unit = textureUnit;\n      textureUnit += uniformInfo.size;\n\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n\n    setter.location = location;\n    return setter;\n  }\n\n  var uniformSetters = {};\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n  for (var ii = 0; ii < numUniforms; ++ii) {\n    var uniformInfo = gl.getActiveUniform(program, ii);\n\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n\n    var name = uniformInfo.name; // remove the array suffix.\n\n    if (name.substr(-3) === \"[0]\") {\n      name = name.substr(0, name.length - 3);\n    }\n\n    var setter = createUniformSetter(program, uniformInfo);\n    uniformSetters[name] = setter;\n  }\n\n  return uniformSetters;\n}\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\n\n\nfunction createTransformFeedbackInfo(gl, program) {\n  var info = {};\n  var numVaryings = gl.getProgramParameter(program, gl.TRANSFORM_FEEDBACK_VARYINGS);\n\n  for (var ii = 0; ii < numVaryings; ++ii) {\n    var varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size\n    };\n  }\n\n  return info;\n}\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\n\n\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n\n  for (var name in bufferInfo) {\n    var varying = transformFeedbackInfo[name];\n\n    if (varying) {\n      var buf = bufferInfo[name];\n\n      if (buf.offset) {\n        gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\n\n\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  var tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n/**\n * @typedef {Object} UniformData\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanitory\n * @property {bool} usedByFragmentShader Self explanitory\n * @property {bool} used Self explanitory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\n\n\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n  var uniformData = [];\n  var uniformIndices = [];\n\n  for (var ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    var uniformInfo = gl.getActiveUniform(program, ii);\n\n    if (isBuiltIn(uniformInfo)) {\n      break;\n    } // REMOVE [0]?\n\n\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [[\"UNIFORM_TYPE\", \"type\"], [\"UNIFORM_SIZE\", \"size\"], // num elements\n  [\"UNIFORM_BLOCK_INDEX\", \"blockNdx\"], [\"UNIFORM_OFFSET\", \"offset\"]].forEach(function (pair) {\n    var pname = pair[0];\n    var key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function (value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n  var blockSpecs = {};\n  var numUniformBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n\n  for (var _ii = 0; _ii < numUniformBlocks; ++_ii) {\n    var name = gl.getActiveUniformBlockName(program, _ii);\n    var blockSpec = {\n      index: _ii,\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)\n    };\n    blockSpec.used = blockSpec.usedByVertexSahder || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData\n  };\n}\n\nvar arraySuffixRE = /\\[\\d+\\]\\.$/; // better way to check?\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object.<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uinformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\n\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  var blockSpecs = uniformBlockSpec.blockSpecs;\n  var uniformData = uniformBlockSpec.uniformData;\n  var blockSpec = blockSpecs[blockName];\n\n  if (!blockSpec) {\n    warn(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {}\n    };\n  }\n\n  var array = new ArrayBuffer(blockSpec.size);\n  var buffer = gl.createBuffer();\n  var uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n  var prefix = blockName + \".\";\n\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n\n  var uniforms = {};\n  blockSpec.uniformIndices.forEach(function (uniformNdx) {\n    var data = uniformData[uniformNdx];\n    var typeInfo = typeMap[data.type];\n    var Type = typeInfo.Type;\n    var length = data.size * typeInfo.size;\n    var name = data.name;\n\n    if (name.substr(0, prefix.length) === prefix) {\n      name = name.substr(prefix.length);\n    }\n\n    uniforms[name] = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);\n  });\n  return {\n    name: blockName,\n    array: array,\n    asFloat: new Float32Array(array),\n    // for debugging\n    buffer: buffer,\n    uniforms: uniforms\n  };\n}\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\n\n\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n/**\n * Binds a unform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the valus into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\n\n\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  var uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  var blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n\n  if (blockSpec) {\n    var bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(gl.UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\n\n\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(gl.UNIFORM_BUFFER, uniformBlockInfo.array, gl.DYNAMIC_DRAW);\n  }\n}\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\n\n\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  var uniforms = uniformBlockInfo.uniforms;\n\n  for (var name in values) {\n    var array = uniforms[name];\n\n    if (array) {\n      var value = values[name];\n\n      if (value.length) {\n        array.set(value);\n      } else {\n        array[0] = value;\n      }\n    }\n  }\n}\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n * @memberOf module:twgl/programs\n */\n\n\nfunction setUniforms(setters, values) {\n  // eslint-disable-line\n  var actualSetters = setters.uniformSetters || setters;\n  var numArgs = arguments.length;\n\n  for (var andx = 1; andx < numArgs; ++andx) {\n    var vals = arguments[andx];\n\n    if (Array.isArray(vals)) {\n      var numValues = vals.length;\n\n      for (var ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, vals[ii]);\n      }\n    } else {\n      for (var name in vals) {\n        var setter = actualSetters[name];\n\n        if (setter) {\n          setter(vals[name]);\n        }\n      }\n    }\n  }\n}\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createAttributeSetters(gl, program) {\n  var attribSetters = {};\n  var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  for (var ii = 0; ii < numAttribs; ++ii) {\n    var attribInfo = gl.getActiveAttrib(program, ii);\n\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n\n    var index = gl.getAttribLocation(program, attribInfo.name);\n    var typeInfo = attrTypeMap[attribInfo.type];\n    var setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n */\n\n\nfunction setAttributes(setters, buffers) {\n  for (var name in buffers) {\n    var setter = setters[name];\n\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivilent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgrmaInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\n\n\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n\n    if (buffers.indices) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n    }\n  }\n}\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @propetty {module:twgl.UniformBlockSpec} [uniformBlockSpace] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramInfoFromProgram(gl, program) {\n  var uniformSetters = createUniformSetters(gl, program);\n  var attribSetters = createAttributeSetters(gl, program);\n  var programInfo = {\n    program: program,\n    uniformSetters: uniformSetters,\n    attribSetters: attribSetters\n  };\n\n  if (utils.isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramInfo(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var good = true;\n  shaderSources = shaderSources.map(function (source) {\n    // Lets assume if there is no \\n it's an id\n    if (source.indexOf(\"\\n\") < 0) {\n      var script = getElementById(source);\n\n      if (!script) {\n        progOptions.errorCallback(\"no element with id: \" + source);\n        good = false;\n      } else {\n        source = script.text;\n      }\n    }\n\n    return source;\n  });\n\n  if (!good) {\n    return null;\n  }\n\n  var program = createProgramFromSources(gl, shaderSources, progOptions);\n\n  if (!program) {\n    return null;\n  }\n\n  return createProgramInfoFromProgram(gl, program);\n}\n\n/***/ }),\n\n/***/ \"./src/textures.js\":\n/*!*************************!*\\\n  !*** ./src/textures.js ***!\n  \\*************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.setTextureDefaults_ = setDefaults;\nexports.createSampler = createSampler;\nexports.createSamplers = createSamplers;\nexports.setSamplerParameters = setSamplerParameters;\nexports.createTexture = createTexture;\nexports.setEmptyTexture = setEmptyTexture;\nexports.setTextureFromArray = setTextureFromArray;\nexports.loadTextureFromUrl = loadTextureFromUrl;\nexports.setTextureFromElement = setTextureFromElement;\nexports.setTextureFilteringForSize = setTextureFilteringForSize;\nexports.setTextureParameters = setTextureParameters;\nexports.setDefaultTextureColor = setDefaultTextureColor;\nexports.createTextures = createTextures;\nexports.resizeTexture = resizeTexture;\nexports.canGenerateMipmap = canGenerateMipmap;\nexports.canFilter = canFilter;\nexports.getNumComponentsForFormat = getNumComponentsForFormat;\nexports.getBytesPerElementForInternalFormat = getBytesPerElementForInternalFormat;\nexports.getFormatAndTypeForInternalFormat = getFormatAndTypeForInternalFormat;\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! ./utils.js */ \"./src/utils.js\"));\n\nvar typedArrays = _interopRequireWildcard(__webpack_require__(/*! ./typedarrays.js */ \"./src/typedarrays.js\"));\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level texture related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibily they are available at both `twgl.textures` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/textures\n */\n// make sure we don't see a global gl\nvar gl = undefined; // eslint-disable-line\n\nvar defaults = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined\n};\nvar isArrayBuffer = typedArrays.isArrayBuffer; // Should we make this on demand?\n\nvar ctx = typeof document !== 'undefined' && document.createElement ? document.createElement(\"canvas\").getContext(\"2d\") : null; // NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an imagebitmap to be cut. Unfortunately cutting an imagebitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\n\nvar ALPHA = 0x1906;\nvar RGB = 0x1907;\nvar RGBA = 0x1908;\nvar LUMINANCE = 0x1909;\nvar LUMINANCE_ALPHA = 0x190A;\nvar DEPTH_COMPONENT = 0x1902;\nvar DEPTH_STENCIL = 0x84F9;\n/* TextureWrapMode */\n\nvar REPEAT = 0x2901; // eslint-disable-line\n\nvar MIRRORED_REPEAT = 0x8370; // eslint-disable-line\n\n/* TextureMagFilter */\n\nvar NEAREST = 0x2600; // eslint-disable-line\n\n/* TextureMinFilter */\n\nvar NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line\n\nvar LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line\n\nvar NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line\n\nvar LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line\n\nvar R8 = 0x8229;\nvar R8_SNORM = 0x8F94;\nvar R16F = 0x822D;\nvar R32F = 0x822E;\nvar R8UI = 0x8232;\nvar R8I = 0x8231;\nvar RG16UI = 0x823A;\nvar RG16I = 0x8239;\nvar RG32UI = 0x823C;\nvar RG32I = 0x823B;\nvar RG8 = 0x822B;\nvar RG8_SNORM = 0x8F95;\nvar RG16F = 0x822F;\nvar RG32F = 0x8230;\nvar RG8UI = 0x8238;\nvar RG8I = 0x8237;\nvar R16UI = 0x8234;\nvar R16I = 0x8233;\nvar R32UI = 0x8236;\nvar R32I = 0x8235;\nvar RGB8 = 0x8051;\nvar SRGB8 = 0x8C41;\nvar RGB565 = 0x8D62;\nvar RGB8_SNORM = 0x8F96;\nvar R11F_G11F_B10F = 0x8C3A;\nvar RGB9_E5 = 0x8C3D;\nvar RGB16F = 0x881B;\nvar RGB32F = 0x8815;\nvar RGB8UI = 0x8D7D;\nvar RGB8I = 0x8D8F;\nvar RGB16UI = 0x8D77;\nvar RGB16I = 0x8D89;\nvar RGB32UI = 0x8D71;\nvar RGB32I = 0x8D83;\nvar RGBA8 = 0x8058;\nvar SRGB8_ALPHA8 = 0x8C43;\nvar RGBA8_SNORM = 0x8F97;\nvar RGB5_A1 = 0x8057;\nvar RGBA4 = 0x8056;\nvar RGB10_A2 = 0x8059;\nvar RGBA16F = 0x881A;\nvar RGBA32F = 0x8814;\nvar RGBA8UI = 0x8D7C;\nvar RGBA8I = 0x8D8E;\nvar RGB10_A2UI = 0x906F;\nvar RGBA16UI = 0x8D76;\nvar RGBA16I = 0x8D88;\nvar RGBA32I = 0x8D82;\nvar RGBA32UI = 0x8D70;\nvar DEPTH_COMPONENT16 = 0x81A5;\nvar DEPTH_COMPONENT24 = 0x81A6;\nvar DEPTH_COMPONENT32F = 0x8CAC;\nvar DEPTH32F_STENCIL8 = 0x8CAD;\nvar DEPTH24_STENCIL8 = 0x88F0;\n/* DataType */\n\nvar BYTE = 0x1400;\nvar UNSIGNED_BYTE = 0x1401;\nvar SHORT = 0x1402;\nvar UNSIGNED_SHORT = 0x1403;\nvar INT = 0x1404;\nvar UNSIGNED_INT = 0x1405;\nvar FLOAT = 0x1406;\nvar UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nvar UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nvar UNSIGNED_SHORT_5_6_5 = 0x8363;\nvar HALF_FLOAT = 0x140B;\nvar HALF_FLOAT_OES = 0x8D61; // Thanks Khronos for making this different >:(\n\nvar UNSIGNED_INT_2_10_10_10_REV = 0x8368;\nvar UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nvar UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\nvar FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nvar UNSIGNED_INT_24_8 = 0x84FA;\nvar RG = 0x8227;\nvar RG_INTEGER = 0x8228;\nvar RED = 0x1903;\nvar RED_INTEGER = 0x8D94;\nvar RGB_INTEGER = 0x8D98;\nvar RGBA_INTEGER = 0x8D99;\nvar formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  var f = formatInfo;\n  f[ALPHA] = {\n    numColorComponents: 1\n  };\n  f[LUMINANCE] = {\n    numColorComponents: 1\n  };\n  f[LUMINANCE_ALPHA] = {\n    numColorComponents: 2\n  };\n  f[RGB] = {\n    numColorComponents: 3\n  };\n  f[RGBA] = {\n    numColorComponents: 4\n  };\n  f[RED] = {\n    numColorComponents: 1\n  };\n  f[RED_INTEGER] = {\n    numColorComponents: 1\n  };\n  f[RG] = {\n    numColorComponents: 2\n  };\n  f[RG_INTEGER] = {\n    numColorComponents: 2\n  };\n  f[RGB] = {\n    numColorComponents: 3\n  };\n  f[RGB_INTEGER] = {\n    numColorComponents: 3\n  };\n  f[RGBA] = {\n    numColorComponents: 4\n  };\n  f[RGBA_INTEGER] = {\n    numColorComponents: 4\n  };\n  f[DEPTH_COMPONENT] = {\n    numColorComponents: 1\n  };\n  f[DEPTH_STENCIL] = {\n    numColorComponents: 2\n  };\n}\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to teximage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nvar textureInternalFormatInfo = {};\n{\n  // NOTE: these properties need unique names so we can let Uglify mangle the name.\n  var t = textureInternalFormatInfo; // unsized formats\n\n  t[ALPHA] = {\n    textureFormat: ALPHA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [1, 2, 2, 4],\n    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]\n  };\n  t[LUMINANCE] = {\n    textureFormat: LUMINANCE,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [1, 2, 2, 4],\n    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]\n  };\n  t[LUMINANCE_ALPHA] = {\n    textureFormat: LUMINANCE_ALPHA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [2, 4, 4, 8],\n    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]\n  };\n  t[RGB] = {\n    textureFormat: RGB,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [3, 6, 6, 12, 2],\n    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_5_6_5]\n  };\n  t[RGBA] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4, 8, 8, 16, 2, 2],\n    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1]\n  }; // sized formats\n\n  t[R8] = {\n    textureFormat: RED,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [1],\n    type: [UNSIGNED_BYTE]\n  };\n  t[R8_SNORM] = {\n    textureFormat: RED,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [1],\n    type: [BYTE]\n  };\n  t[R16F] = {\n    textureFormat: RED,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [4, 2],\n    type: [FLOAT, HALF_FLOAT]\n  };\n  t[R32F] = {\n    textureFormat: RED,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [FLOAT]\n  };\n  t[R8UI] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [1],\n    type: [UNSIGNED_BYTE]\n  };\n  t[R8I] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [1],\n    type: [BYTE]\n  };\n  t[R16UI] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [2],\n    type: [UNSIGNED_SHORT]\n  };\n  t[R16I] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [2],\n    type: [SHORT]\n  };\n  t[R32UI] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_INT]\n  };\n  t[R32I] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [INT]\n  };\n  t[RG8] = {\n    textureFormat: RG,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [2],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RG8_SNORM] = {\n    textureFormat: RG,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [2],\n    type: [BYTE]\n  };\n  t[RG16F] = {\n    textureFormat: RG,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [8, 4],\n    type: [FLOAT, HALF_FLOAT]\n  };\n  t[RG32F] = {\n    textureFormat: RG,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [8],\n    type: [FLOAT]\n  };\n  t[RG8UI] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [2],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RG8I] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [2],\n    type: [BYTE]\n  };\n  t[RG16UI] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_SHORT]\n  };\n  t[RG16I] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [SHORT]\n  };\n  t[RG32UI] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [8],\n    type: [UNSIGNED_INT]\n  };\n  t[RG32I] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [8],\n    type: [INT]\n  };\n  t[RGB8] = {\n    textureFormat: RGB,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [3],\n    type: [UNSIGNED_BYTE]\n  };\n  t[SRGB8] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [3],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RGB565] = {\n    textureFormat: RGB,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [3, 2],\n    type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5]\n  };\n  t[RGB8_SNORM] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [3],\n    type: [BYTE]\n  };\n  t[R11F_G11F_B10F] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [12, 6, 4],\n    type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV]\n  };\n  t[RGB9_E5] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [12, 6, 4],\n    type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV]\n  };\n  t[RGB16F] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [12, 6],\n    type: [FLOAT, HALF_FLOAT]\n  };\n  t[RGB32F] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [12],\n    type: [FLOAT]\n  };\n  t[RGB8UI] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [3],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RGB8I] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [3],\n    type: [BYTE]\n  };\n  t[RGB16UI] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [6],\n    type: [UNSIGNED_SHORT]\n  };\n  t[RGB16I] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [6],\n    type: [SHORT]\n  };\n  t[RGB32UI] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [12],\n    type: [UNSIGNED_INT]\n  };\n  t[RGB32I] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [12],\n    type: [INT]\n  };\n  t[RGBA8] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4],\n    type: [UNSIGNED_BYTE]\n  };\n  t[SRGB8_ALPHA8] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RGBA8_SNORM] = {\n    textureFormat: RGBA,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [4],\n    type: [BYTE]\n  };\n  t[RGB5_A1] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4, 2, 4],\n    type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV]\n  };\n  t[RGBA4] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4, 2],\n    type: [UNSIGNED_BYTE, UNSIGNED_SHORT_4_4_4_4]\n  };\n  t[RGB10_A2] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4],\n    type: [UNSIGNED_INT_2_10_10_10_REV]\n  };\n  t[RGBA16F] = {\n    textureFormat: RGBA,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [16, 8],\n    type: [FLOAT, HALF_FLOAT]\n  };\n  t[RGBA32F] = {\n    textureFormat: RGBA,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [16],\n    type: [FLOAT]\n  };\n  t[RGBA8UI] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RGBA8I] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [BYTE]\n  };\n  t[RGB10_A2UI] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_INT_2_10_10_10_REV]\n  };\n  t[RGBA16UI] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [8],\n    type: [UNSIGNED_SHORT]\n  };\n  t[RGBA16I] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [8],\n    type: [SHORT]\n  };\n  t[RGBA32I] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [16],\n    type: [INT]\n  };\n  t[RGBA32UI] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [16],\n    type: [UNSIGNED_INT]\n  }; // Sized Internal\n\n  t[DEPTH_COMPONENT16] = {\n    textureFormat: DEPTH_COMPONENT,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [2, 4],\n    type: [UNSIGNED_SHORT, UNSIGNED_INT]\n  };\n  t[DEPTH_COMPONENT24] = {\n    textureFormat: DEPTH_COMPONENT,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_INT]\n  };\n  t[DEPTH_COMPONENT32F] = {\n    textureFormat: DEPTH_COMPONENT,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [FLOAT]\n  };\n  t[DEPTH24_STENCIL8] = {\n    textureFormat: DEPTH_STENCIL,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_INT_24_8]\n  };\n  t[DEPTH32F_STENCIL8] = {\n    textureFormat: DEPTH_STENCIL,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [FLOAT_32_UNSIGNED_INT_24_8_REV]\n  };\n  Object.keys(t).forEach(function (internalFormat) {\n    var info = t[internalFormat];\n    info.bytesPerElementMap = {};\n    info.bytesPerElement.forEach(function (bytesPerElement, ndx) {\n      var type = info.type[ndx];\n      info.bytesPerElementMap[type] = bytesPerElement;\n    });\n  });\n}\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\n\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  var info = textureInternalFormatInfo[internalFormat];\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  var bytesPerElement = info.bytesPerElementMap[type];\n\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n\n  return bytesPerElement;\n}\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\n\n\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  var info = textureInternalFormatInfo[internalFormat];\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  return {\n    format: info.textureFormat,\n    type: info.type[0]\n  };\n}\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\n\n\nfunction isPowerOf2(value) {\n  return (value & value - 1) === 0;\n}\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\n\n\nfunction canGenerateMipmap(gl, width, height, internalFormat\n/*, type */\n) {\n  if (!utils.isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n\n  var info = textureInternalFormatInfo[internalFormat];\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  return info.colorRenderable && info.textureFilterable;\n}\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\n\n\nfunction canFilter(internalFormat\n/*, type */\n) {\n  var info = textureInternalFormatInfo[internalFormat];\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  return info.textureFilterable;\n}\n/**\n * Gets the number of compontents for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\n\n\nfunction getNumComponentsForFormat(format) {\n  var info = formatInfo[format];\n\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n\n  return info.numColorComponents;\n}\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\n\n\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer(src)) {\n    return typedArrays.getGLTypeForTypedArray(src);\n  }\n\n  return defaultType || gl.UNSIGNED_BYTE;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n\n  if (!width && !height) {\n    var size = Math.sqrt(numElements / (target === gl.TEXTURE_CUBE_MAP ? 6 : 1));\n\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n\n  return {\n    width: width,\n    height: height\n  };\n}\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\n\n\nfunction setDefaultTextureColor(color) {\n  defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documentented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediatley. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then eact entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n// NOTE: While querying GL is considered slow it's not remotely as slow\n// as uploading a texture. On top of that you're unlikely to call this in\n// a perf critical loop. Even if upload a texture every frame that's unlikely\n// to be more than 1 or 2 textures a frame. In other words, the benefits of\n// making the API easy to use outweigh any supposed perf benefits\n//\n// Also note I get that having one global of these is bad practice.\n// As long as it's used correctly it means no garbage which probably\n// doesn't matter when dealing with textures but old habits die hard.\n\n\nvar lastPackState = {};\n/**\n * Saves any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\n\nfunction savePackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    lastPackState.colorspaceConversion = gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL);\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n\n  if (options.premultiplyAlpha !== undefined) {\n    lastPackState.premultiplyAlpha = gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n\n  if (options.flipY !== undefined) {\n    lastPackState.flipY = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n/**\n * Restores any packing state that was set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\n\n\nfunction restorePackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, lastPackState.colorspaceConversion);\n  }\n\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, lastPackState.premultiplyAlpha);\n  }\n\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, lastPackState.flipY);\n  }\n}\n/**\n * Saves state related to data size\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\n\n\nfunction saveSkipState(gl) {\n  lastPackState.unpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n\n  if (utils.isWebGL2(gl)) {\n    lastPackState.unpackRowLength = gl.getParameter(gl.UNPACK_ROW_LENGTH);\n    lastPackState.unpackImageHeight = gl.getParameter(gl.UNPACK_IMAGE_HEIGHT);\n    lastPackState.unpackSkipPixels = gl.getParameter(gl.UNPACK_SKIP_PIXELS);\n    lastPackState.unpackSkipRows = gl.getParameter(gl.UNPACK_SKIP_ROWS);\n    lastPackState.unpackSkipImages = gl.getParameter(gl.UNPACK_SKIP_IMAGES);\n  }\n}\n/**\n * Restores state related to data size\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\n\n\nfunction restoreSkipState(gl) {\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, lastPackState.unpackAlignment);\n\n  if (utils.isWebGL2(gl)) {\n    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, lastPackState.unpackRowLength);\n    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, lastPackState.unpackImageHeight);\n    gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, lastPackState.unpackSkipPixels);\n    gl.pixelStorei(gl.UNPACK_SKIP_ROWS, lastPackState.unpackSkipRows);\n    gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, lastPackState.unpackSkipImages);\n  }\n}\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParamteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\n\n\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, gl.TEXTURE_MAG_FILTER, options.minMag);\n  }\n\n  if (options.min) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MIN_FILTER, options.min);\n  }\n\n  if (options.mag) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MAG_FILTER, options.mag);\n  }\n\n  if (options.wrap) {\n    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_T, options.wrap);\n\n    if (target === gl.TEXTURE_3D || helper.isSampler(gl, target)) {\n      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_R, options.wrapR);\n  }\n\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_S, options.wrapS);\n  }\n\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_T, options.wrapT);\n  }\n\n  if (options.minLod) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MIN_LOD, options.minLod);\n  }\n\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MAX_LOD, options.maxLod);\n  }\n\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, gl.TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureParameters(gl, tex, options) {\n  var target = options.target || gl.TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\n\n\nfunction createSampler(gl, options) {\n  var sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\n\n\nfunction createSamplers(gl, samplerOptions) {\n  var samplers = {};\n  Object.keys(samplerOptions).forEach(function (name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\n\n\nfunction make1Pixel(color) {\n  color = color || defaults.textureColor;\n\n  if (isArrayBuffer(color)) {\n    return color;\n  }\n\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @param {number} [type] The type parameter for texImage2D etc..\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type) {\n  options = options || defaults.textureOptions;\n  internalFormat = internalFormat || gl.RGBA;\n  type = type || gl.UNSIGNED_BYTE;\n  var target = options.target || gl.TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n\n  if (canGenerateMipmap(gl, width, height, internalFormat, type)) {\n    gl.generateMipmap(target);\n  } else {\n    var filtering = canFilter(internalFormat, type) ? gl.LINEAR : gl.NEAREST;\n    gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || options.auto === undefined && options.level === undefined;\n}\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\n\n\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n}\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundent but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\n\n\nfunction getCubeFacesWithNdx(gl, options) {\n  var faces = getCubeFaceOrder(gl, options); // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n\n  var facesWithNdx = faces.map(function (face, ndx) {\n    return {\n      face: face,\n      ndx: ndx\n    };\n  });\n  facesWithNdx.sort(function (a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\n\n\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults.textureOptions;\n  var target = options.target || gl.TEXTURE_2D;\n  var level = options.level || 0;\n  var width = element.width;\n  var height = element.height;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || formatType.type;\n  savePackState(gl, options);\n  gl.bindTexture(target, tex);\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    // guess the parts\n    var imgWidth = element.width;\n    var imgHeight = element.height;\n    var size;\n    var slices;\n\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function (f) {\n        var xOffset = slices[f.ndx * 2 + 0] * size;\n        var yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      }); // Free up the canvas memory\n\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function (f) {\n        var xOffset = slices[f.ndx * 2 + 0] * size;\n        var yOffset = slices[f.ndx * 2 + 1] * size; // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be unrenderable.\n\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none'\n        }).then(function (imageBitmap) {\n          savePackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          restorePackState(gl, options);\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);\n          }\n        });\n      });\n    }\n  } else if (target === gl.TEXTURE_3D || target === gl.TEXTURE_2D_ARRAY) {\n    var smallest = Math.min(element.width, element.height);\n    var largest = Math.max(element.width, element.height);\n    var depth = largest / smallest;\n\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n\n    var xMult = element.width === largest ? 1 : 0;\n    var yMult = element.height === largest ? 1 : 0;\n    saveSkipState(gl);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n\n    for (var d = 0; d < depth; ++d) {\n      var srcX = d * smallest * xMult;\n      var srcY = d * smallest * yMult;\n      gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(gl.UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n\n    restoreSkipState(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n\n  restorePackState(gl, options);\n\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);\n  }\n\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {}\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\n\n\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    var a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname && a.port === location.port && a.protocol === location.protocol;\n  } else {\n    var localOrigin = new URL(location.href).origin;\n    var urlOrigin = new URL(url, location.href).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url) ? 'anonymous' : crossOrigin;\n}\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\n\n\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  var img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    var clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError); // eslint-disable-line\n\n      img.removeEventListener('load', onLoad); // eslint-disable-line\n\n      img = null;\n    };\n\n    var onError = function onError() {\n      var msg = \"couldn't load image: \" + url;\n      helper.error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    var onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    var err;\n    var bm;\n\n    var cb = function cb() {\n      callback(err, bm);\n    };\n\n    var options = {};\n\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n\n    fetch(url, options).then(function (response) {\n      if (!response.ok) {\n        throw response;\n      }\n\n      return response.blob();\n    }).then(function (blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none'\n      });\n    }).then(function (bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function (e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n\n  return img;\n}\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\n\n\nfunction isTexImageSource(obj) {\n  return typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap || typeof ImageData !== 'undefined' && obj instanceof ImageData || typeof HTMLElement !== 'undefined' && obj instanceof HTMLElement;\n}\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\n\n\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function () {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults.textureOptions;\n  var target = options.target || gl.TEXTURE_2D;\n  gl.bindTexture(target, tex);\n\n  if (options.color === false) {\n    return;\n  } // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n\n\n  var color = make1Pixel(options.color);\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    for (var ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n    }\n  } else if (target === gl.TEXTURE_3D || target === gl.TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n  } else {\n    gl.texImage2D(target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n  }\n}\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} souce image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as approriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\n\n\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.\n\n  options = Object.assign({}, options);\n  var img = loadAndUseImage(options.src, options.crossOrigin, function (err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\n\n\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  var urls = options.src;\n\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || gl.UNSIGNED_BYTE;\n  var target = options.target || gl.TEXTURE_2D;\n\n  if (target !== gl.TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n\n  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.\n\n  options = Object.assign({}, options);\n  var numToLoad = 6;\n  var errors = [];\n  var faces = getCubeFaceOrder(gl, options);\n  var imgs; // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function (err, img) {\n      --numToLoad;\n\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          savePackState(gl, options);\n          gl.bindTexture(target, tex); // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder(gl).forEach(function (otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          restorePackState(gl, options);\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function (url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\n\n\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  var urls = options.src;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || gl.UNSIGNED_BYTE;\n  var target = options.target || gl.TEXTURE_2D_ARRAY;\n\n  if (target !== gl.TEXTURE_3D && target !== gl.TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n\n  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.\n\n  options = Object.assign({}, options);\n  var numToLoad = urls.length;\n  var errors = [];\n  var imgs; // eslint-disable-line\n\n  var level = options.level || 0;\n  var width = options.width;\n  var height = options.height;\n  var depth = urls.length;\n  var firstImage = true;\n\n  function uploadImg(slice) {\n    return function (err, img) {\n      --numToLoad;\n\n      if (err) {\n        errors.push(err);\n      } else {\n        savePackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null); // put it in every slice otherwise some slices will be 0,0,0,0\n\n          for (var s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          var src = img;\n\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src); // free the canvas memory\n\n          if (src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        restorePackState(gl, options);\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function (url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults.textureOptions;\n  var target = options.target || gl.TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  var width = options.width;\n  var height = options.height;\n  var depth = options.depth;\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n\n  if (!isArrayBuffer(src)) {\n    var Type = typedArrays.getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  var bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  var numElements = src.byteLength / bytesPerElement; // TODO: check UNPACK_ALIGNMENT?\n\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + utils.glEnumToString(gl, format);\n  }\n\n  var dimensions;\n\n  if (target === gl.TEXTURE_3D) {\n    if (!width && !height && !depth) {\n      var size = Math.cbrt(numElements);\n\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n\n  saveSkipState(gl);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  savePackState(gl, options);\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    var elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    var faceSize = numElements / 6 * elementsPerElement;\n    getCubeFacesWithNdx(gl, options).forEach(function (f) {\n      var offset = faceSize * f.ndx;\n      var data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === gl.TEXTURE_3D) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n\n  restorePackState(gl, options);\n  restoreSkipState(gl);\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type\n  };\n}\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setEmptyTexture(gl, tex, options) {\n  var target = options.target || gl.TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || formatType.type;\n  savePackState(gl, options);\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    for (var ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === gl.TEXTURE_3D) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n\n  restorePackState(gl, options);\n}\n/**\n * Creates a texture based on the options passed in.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  var tex = gl.createTexture();\n  var target = options.target || gl.TEXTURE_2D;\n  var width = options.width || 1;\n  var height = options.height || 1;\n  var internalFormat = options.internalFormat || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var type = options.type || formatType.type;\n  gl.bindTexture(target, tex);\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    // this should have been the default for CUBEMAPS :(\n    gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  }\n\n  var src = options.src;\n\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n\n    if (typeof src === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer(src) || Array.isArray(src) && (typeof src[0] === 'number' || Array.isArray(src[0]) || isArrayBuffer(src[0]))) {\n      var dimensions = setTextureFromArray(gl, tex, src, options);\n      width = dimensions.width;\n      height = dimensions.height;\n      type = dimensions.type;\n    } else if (Array.isArray(src) && (typeof src[0] === 'string' || isTexImageSource(src[0]))) {\n      if (target === gl.TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else if (isTexImageSource(src)) {\n      setTextureFromElement(gl, tex, src, options);\n      width = src.width;\n      height = src.height;\n    } else {\n      throw \"unsupported src type\";\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);\n  }\n\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @memberOf module:twgl/textures\n */\n\n\nfunction resizeTexture(gl, tex, options, width, height) {\n  width = width || options.width;\n  height = height || options.height;\n  var target = options.target || gl.TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type;\n  var src = options.src;\n\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer(src) || Array.isArray(src) && typeof src[0] === 'number') {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    for (var ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\n\n\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' || Array.isArray(src) && typeof src[0] === 'string';\n}\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\n\n\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  var numDownloading = 0;\n  var errors = [];\n  var textures = {};\n  var images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function () {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function (name) {\n    var options = textureOptions[name];\n    var onLoadFn;\n\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function onLoadFn(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n\n        if (err) {\n          errors.push(err);\n        }\n\n        callCallbackIfReady();\n      };\n\n      ++numDownloading;\n    }\n\n    textures[name] = createTexture(gl, options, onLoadFn);\n  }); // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n\n  callCallbackIfReady();\n  return textures;\n} // Using quotes prevents Uglify from changing the names.\n// No speed diff AFAICT.\n\n/***/ }),\n\n/***/ \"./src/twgl-full.js\":\n/*!**************************!*\\\n  !*** ./src/twgl-full.js ***!\n  \\**************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nvar _exportNames = {\n  m4: true,\n  v3: true,\n  primitives: true\n};\nexports.primitives = exports.v3 = exports.m4 = void 0;\n\nvar m4 = _interopRequireWildcard(__webpack_require__(/*! ./m4.js */ \"./src/m4.js\"));\n\nexports.m4 = m4;\n\nvar v3 = _interopRequireWildcard(__webpack_require__(/*! ./v3.js */ \"./src/v3.js\"));\n\nexports.v3 = v3;\n\nvar primitives = _interopRequireWildcard(__webpack_require__(/*! ./primitives.js */ \"./src/primitives.js\"));\n\nexports.primitives = primitives;\n\nvar _twgl = __webpack_require__(/*! ./twgl.js */ \"./src/twgl.js\");\n\nObject.keys(_twgl).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _twgl[key];\n});\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/***/ }),\n\n/***/ \"./src/twgl.js\":\n/*!*********************!*\\\n  !*** ./src/twgl.js ***!\n  \\*********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nvar _exportNames = {\n  addExtensionsToContext: true,\n  getContext: true,\n  getWebGLContext: true,\n  resizeCanvasToDisplaySize: true,\n  setDefaults: true\n};\nexports.addExtensionsToContext = addExtensionsToContext;\nexports.getContext = getContext;\nexports.getWebGLContext = getWebGLContext;\nexports.resizeCanvasToDisplaySize = resizeCanvasToDisplaySize;\nexports.setDefaults = setDefaults;\n\nvar attributes = _interopRequireWildcard(__webpack_require__(/*! ./attributes.js */ \"./src/attributes.js\"));\n\nObject.keys(attributes).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = attributes[key];\n});\n\nvar textures = _interopRequireWildcard(__webpack_require__(/*! ./textures.js */ \"./src/textures.js\"));\n\nObject.keys(textures).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = textures[key];\n});\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! ./utils.js */ \"./src/utils.js\"));\n\nObject.keys(utils).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = utils[key];\n});\n\nvar _draw = __webpack_require__(/*! ./draw.js */ \"./src/draw.js\");\n\nObject.keys(_draw).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _draw[key];\n});\n\nvar _framebuffers = __webpack_require__(/*! ./framebuffers.js */ \"./src/framebuffers.js\");\n\nObject.keys(_framebuffers).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _framebuffers[key];\n});\n\nvar _programs = __webpack_require__(/*! ./programs.js */ \"./src/programs.js\");\n\nObject.keys(_programs).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _programs[key];\n});\n\nvar _typedarrays = __webpack_require__(/*! ./typedarrays.js */ \"./src/typedarrays.js\");\n\nObject.keys(_typedarrays).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _typedarrays[key];\n});\n\nvar _vertexArrays = __webpack_require__(/*! ./vertex-arrays.js */ \"./src/vertex-arrays.js\");\n\nObject.keys(_vertexArrays).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _vertexArrays[key];\n});\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * The main TWGL module.\n *\n * For most use cases you shouldn't need anything outside this module.\n * Exceptions between the stuff added to twgl-full (v3, m4, primitives)\n *\n * @module twgl\n * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray\n * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays\n * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo\n * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo\n * @borrows module:twgl/draw.drawObjectList as drawObjectList\n * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo\n * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo\n * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo\n * @borrows module:twgl/programs.createProgramInfo as createProgramInfo\n * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo\n * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock\n * @borrows module:twgl/programs.setUniformBlock as setUniformBlock\n * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms\n * @borrows module:twgl/programs.setUniforms as setUniforms\n * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes\n * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray\n * @borrows module:twgl/textures.createTexture as createTexture\n * @borrows module:twgl/textures.resizeTexture as resizeTexture\n * @borrows module:twgl/textures.createTextures as createTextures\n */\n// make sure we don't see a global gl\nvar gl = undefined; // eslint-disable-line\n\nvar defaults = {\n  addExtensionsToContext: true\n};\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.\n *\n *   In otherwords I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n  attributes.setAttributeDefaults_(newDefaults); // eslint-disable-line\n\n  textures.setTextureDefaults_(newDefaults); // eslint-disable-line\n}\n\nvar prefixRE = /^(.*?)_/;\n\nfunction addExtensionToContext(gl, extensionName) {\n  utils.glEnumToString(gl, 0);\n  var ext = gl.getExtension(extensionName);\n\n  if (ext) {\n    var enums = {};\n    var fnSuffix = prefixRE.exec(extensionName)[1];\n    var enumSuffix = '_' + fnSuffix;\n\n    for (var key in ext) {\n      var value = ext[key];\n      var isFunc = typeof value === 'function';\n      var suffix = isFunc ? fnSuffix : enumSuffix;\n      var name = key; // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          helper.warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function (origFn) {\n            return function () {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    } // pass the modified enums to glEnumToString\n\n\n    enums.constructor = {\n      name: ext.constructor.name\n    };\n    utils.glEnumToString(enums, 0);\n  }\n\n  return ext;\n}\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\n\n\nvar supportedExtensions = ['ANGLE_instanced_arrays', 'EXT_blend_minmax', 'EXT_color_buffer_float', 'EXT_color_buffer_half_float', 'EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2', 'EXT_frag_depth', 'EXT_sRGB', 'EXT_shader_texture_lod', 'EXT_texture_filter_anisotropic', 'OES_element_index_uint', 'OES_standard_derivatives', 'OES_texture_float', 'OES_texture_float_linear', 'OES_texture_half_float', 'OES_texture_half_float_linear', 'OES_vertex_array_object', 'WEBGL_color_buffer_float', 'WEBGL_compressed_texture_atc', 'WEBGL_compressed_texture_etc1', 'WEBGL_compressed_texture_pvrtc', 'WEBGL_compressed_texture_s3tc', 'WEBGL_compressed_texture_s3tc_srgb', 'WEBGL_depth_texture', 'WEBGL_draw_buffers'];\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existance of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\n\nfunction addExtensionsToContext(gl) {\n  for (var ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\n\n\nfunction create3DContext(canvas, opt_attribs) {\n  var names = [\"webgl\", \"experimental-webgl\"];\n  var context = null;\n\n  for (var ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n\n      break;\n    }\n  }\n\n  return context;\n}\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\n\n\nfunction getWebGLContext(canvas, opt_attribs) {\n  var gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\n\n\nfunction createContext(canvas, opt_attribs) {\n  var names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  var context = null;\n\n  for (var ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n\n      break;\n    }\n  }\n\n  return context;\n}\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\n\n\nfunction getContext(canvas, opt_attribs) {\n  var gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\n\n\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  var width = canvas.clientWidth * multiplier | 0;\n  var height = canvas.clientHeight * multiplier | 0;\n\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n\n  return false;\n}\n\n/***/ }),\n\n/***/ \"./src/typedarrays.js\":\n/*!****************************!*\\\n  !*** ./src/typedarrays.js ***!\n  \\****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.getGLTypeForTypedArray = getGLTypeForTypedArray;\nexports.getGLTypeForTypedArrayType = getGLTypeForTypedArrayType;\nexports.getTypedArrayTypeForGLType = getTypedArrayTypeForGLType;\nexports.isArrayBuffer = void 0;\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader typed array related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibily they are available at both `twgl.typedArray` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/typedArray\n */\n// make sure we don't see a global gl\nvar gl = undefined; // eslint-disable-line\n\n/* DataType */\n\nvar BYTE = 0x1400;\nvar UNSIGNED_BYTE = 0x1401;\nvar SHORT = 0x1402;\nvar UNSIGNED_SHORT = 0x1403;\nvar INT = 0x1404;\nvar UNSIGNED_INT = 0x1405;\nvar FLOAT = 0x1406;\nvar UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nvar UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nvar UNSIGNED_SHORT_5_6_5 = 0x8363;\nvar HALF_FLOAT = 0x140B;\nvar UNSIGNED_INT_2_10_10_10_REV = 0x8368;\nvar UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nvar UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\nvar FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nvar UNSIGNED_INT_24_8 = 0x84FA;\nvar glTypeToTypedArray = {};\n{\n  var tt = glTypeToTypedArray;\n  tt[BYTE] = Int8Array;\n  tt[UNSIGNED_BYTE] = Uint8Array;\n  tt[SHORT] = Int16Array;\n  tt[UNSIGNED_SHORT] = Uint16Array;\n  tt[INT] = Int32Array;\n  tt[UNSIGNED_INT] = Uint32Array;\n  tt[FLOAT] = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4] = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1] = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5] = Uint16Array;\n  tt[HALF_FLOAT] = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV] = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV] = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV] = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8] = Uint32Array;\n}\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\n\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array) {\n    return BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint8Array) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint8ClampedArray) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Int16Array) {\n    return SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint16Array) {\n    return UNSIGNED_SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Int32Array) {\n    return INT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint32Array) {\n    return UNSIGNED_INT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Float32Array) {\n    return FLOAT;\n  } // eslint-disable-line\n\n\n  throw new Error('unsupported typed array type');\n}\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\n\n\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array) {\n    return BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint8Array) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint8ClampedArray) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Int16Array) {\n    return SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint16Array) {\n    return UNSIGNED_SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Int32Array) {\n    return INT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint32Array) {\n    return UNSIGNED_INT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Float32Array) {\n    return FLOAT;\n  } // eslint-disable-line\n\n\n  throw new Error('unsupported typed array type');\n}\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\n\n\nfunction getTypedArrayTypeForGLType(type) {\n  var CTOR = glTypeToTypedArray[type];\n\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n\n  return CTOR;\n}\n\nvar isArrayBuffer = typeof SharedArrayBuffer !== 'undefined' ? function isArrayBufferOrSharedArrayBuffer(a) {\n  return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n} : function isArrayBuffer(a) {\n  return a && a.buffer && a.buffer instanceof ArrayBuffer;\n};\nexports.isArrayBuffer = isArrayBuffer;\n\n/***/ }),\n\n/***/ \"./src/utils.js\":\n/*!**********************!*\\\n  !*** ./src/utils.js ***!\n  \\**********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.isWebGL1 = isWebGL1;\nexports.isWebGL2 = isWebGL2;\nexports.glEnumToString = void 0;\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\n\n\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\n\n\nvar glEnumToString = function () {\n  var haveEnumsForType = {};\n  var enums = {};\n\n  function addEnums(gl) {\n    var type = gl.constructor.name;\n\n    if (!haveEnumsForType[type]) {\n      for (var key in gl) {\n        if (typeof gl[key] === 'number') {\n          var existing = enums[gl[key]];\n          enums[gl[key]] = existing ? \"\".concat(existing, \" | \").concat(key) : key;\n        }\n      }\n\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || \"0x\" + value.toString(16);\n  };\n}();\n\nexports.glEnumToString = glEnumToString;\n\n/***/ }),\n\n/***/ \"./src/v3.js\":\n/*!*******************!*\\\n  !*** ./src/v3.js ***!\n  \\*******************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.add = add;\nexports.copy = copy;\nexports.create = create;\nexports.cross = cross;\nexports.distance = distance;\nexports.distanceSq = distanceSq;\nexports.divide = divide;\nexports.divScalar = divScalar;\nexports.dot = dot;\nexports.lerp = lerp;\nexports.lerpV = lerpV;\nexports.length = length;\nexports.lengthSq = lengthSq;\nexports.max = max;\nexports.min = min;\nexports.mulScalar = mulScalar;\nexports.multiply = multiply;\nexports.negate = negate;\nexports.normalize = normalize;\nexports.setDefaultType = setDefaultType;\nexports.subtract = subtract;\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v3 = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\nvar VecType = Float32Array;\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\n\nfunction setDefaultType(ctor) {\n  var oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction create(x, y, z) {\n  var dst = new VecType(3);\n\n  if (x) {\n    dst[0] = x;\n  }\n\n  if (y) {\n    dst[1] = y;\n  }\n\n  if (z) {\n    dst[2] = z;\n  }\n\n  return dst;\n}\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n  return dst;\n}\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n  return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n  return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n  return dst;\n}\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n  return dst;\n}\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n  return dst;\n}\n/**\n * Mutiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} dst.\n * @memberOf module:twgl/v3\n */\n\n\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n  return dst;\n}\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} dst.\n * @memberOf module:twgl/v3\n */\n\n\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n  return dst;\n}\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} The vector a cross b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n  var t1 = a[2] * b[0] - a[0] * b[2];\n  var t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n  return dst;\n}\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\n\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction length(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\n\n\nfunction distance(a, b) {\n  var dx = a[0] - b[0];\n  var dy = a[1] - b[1];\n  var dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\n\n\nfunction distanceSq(a, b) {\n  var dx = a[0] - b[0];\n  var dy = a[1] - b[1];\n  var dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n  var lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  var len = Math.sqrt(lenSq);\n\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\n\n\nfunction negate(v, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n  return dst;\n}\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\n\n\nfunction copy(v, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n  return dst;\n}\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction multiply(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n  return dst;\n}\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n  return dst;\n}\n\n/***/ }),\n\n/***/ \"./src/vertex-arrays.js\":\n/*!******************************!*\\\n  !*** ./src/vertex-arrays.js ***!\n  \\******************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.createVertexArrayInfo = createVertexArrayInfo;\nexports.createVAOAndSetAttributes = createVAOAndSetAttributes;\nexports.createVAOFromBufferInfo = createVAOFromBufferInfo;\n\nvar programs = _interopRequireWildcard(__webpack_require__(/*! ./programs.js */ \"./src/programs.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibily they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  var vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n\n  programInfos.forEach(function (programInfo) {\n    programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao\n  };\n}\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\n\n\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  var vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  programs.setAttributes(setters, attribs);\n\n  if (indices) {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n  } // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n\n\n  gl.bindVertexArray(null);\n  return vao;\n}\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\n\n\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\n/***/ })\n\n/******/ });\n});\n//# sourceMappingURL=twgl-full.js.map","export default \"attribute vec4 position;\\r\\n\\r\\nvoid main() {\\r\\n    gl_Position = position;\\r\\n}\\r\\n\"","export default \"precision mediump float;\\r\\n\\r\\nuniform vec2 resolution;\\r\\nuniform float layerCount;\\r\\nuniform float time;\\r\\nuniform vec3 bgColor;\\r\\nuniform vec3 cloudColor1;\\r\\nuniform vec3 cloudColor2;\\r\\n\\r\\n#define TAU 6.28318530718\\r\\n\\r\\nfloat func(float pX) {\\r\\n    return 0.6 * (0.5 * sin(0.1 * pX) + 0.5 * sin(0.553 * pX) + 0.7 * sin(1.2 * pX));\\r\\n}\\r\\n\\r\\nfloat funcR(float pX) {\\r\\n    return 0.5 + 0.25 * (1.0 + sin(mod(40.0 * pX, TAU)));\\r\\n}\\r\\n\\r\\nfloat layer(vec2 pQ, float pT) {\\r\\n    vec2 Qt = 3.5 * pQ;\\r\\n    pT *= 0.5;\\r\\n    Qt.x += pT;\\r\\n\\r\\n    float Xi = floor(Qt.x);\\r\\n    float Xf = Qt.x - Xi - 0.5;\\r\\n\\r\\n    vec2 C;\\r\\n    float Yi;\\r\\n    float D = 1.0 - step(Qt.y,  func(Qt.x));\\r\\n\\r\\n    Yi = func(Xi + 0.5);\\r\\n    C = vec2(Xf, Qt.y - Yi ); \\r\\n    D =  min(D, length(C) - funcR(Xi + pT / 80.0));\\r\\n\\r\\n    Yi = func(Xi + 1.0 + 0.5);\\r\\n    C = vec2(Xf - 1.0, Qt.y - Yi ); \\r\\n    D =  min(D, length(C) - funcR(Xi + 1.0+ pT / 80.0));\\r\\n\\r\\n    Yi = func(Xi - 1.0 + 0.5);\\r\\n    C = vec2(Xf + 1.0, Qt.y - Yi ); \\r\\n    D =  min(D, length(C) - funcR(Xi - 1.0 + pT / 80.0));\\r\\n\\r\\n    return min(1.0, D);\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n    float t = time;\\r\\n    vec2 UV = 2.0 * (gl_FragCoord.xy - resolution.xy / 2.0) / min(resolution.x, resolution.y);\\t\\r\\n    \\r\\n    vec3 Color = bgColor;\\r\\n\\r\\n    for(float i = 0.0; i < 0.8; i += 0.1) {\\r\\n        if (i >= layerCount) {\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        float Lt =  t * (0.5 + 2.0 * i) * (1.0 + 0.1 * sin(226.0 * i)) + 1000.0 * i;\\r\\n        vec2 Lp = vec2(100.0 * i, 0.8 * (i / (layerCount - 0.0999) / 0.8) - 0.3);\\r\\n        float L = layer(UV + Lp, Lt);\\r\\n\\r\\n        float Blur = 4.0 * (0.5 * abs(2.0 - 5.0 * i)) / (11.0 - 5.0 * i);\\r\\n\\r\\n        float V = mix(0.0, 1.0, 1.0 - smoothstep(0.0, 0.01 + 0.2 * Blur, L));\\r\\n        vec3 Lc = mix(cloudColor1, cloudColor2, i / (layerCount - 0.0999) / 0.8);\\r\\n\\r\\n        Color = mix(Color, Lc,  V);\\r\\n    }\\r\\n\\r\\n    gl_FragColor = vec4(Color, 1.0);\\r\\n}\\r\\n\""],"sourceRoot":""}